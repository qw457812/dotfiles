#下面的 #号 是注释符，注释了就无效了，删掉即可生效

patch:
  translator/dictionary: tigress.extended #引入增补自定词典，这个不要改动
  #translator/enable_completion: true # 编码提示，默认关闭，删掉行首的#号，即可开启
  #speller/auto_select_pattern: ^;\w+|^\w{4}$  # 四码上屏功能，删掉行首的#号，即可开启
  #speller/alphabet: "['zyxwvutsrqponmlkjihgfedcba]" # 取消分号引导的快符功能（分号不作码元），删掉行首#号即可生效
  #style/mark_text: " " #编号前标志，删除前面的#号可以替换成空格，也可在引号里可以自己加东西替换，如 "😅"
  #style/layout/border_width: 2 #边框宽度，默认是0
  #style/layout/border_height: 2 #边框高度，默认是0

  # ------------------------------------------------------------------------------------------
  # menu/page_size: 9 # 自定义候选个数，可修改。若要改成5个，行首加上#号注释即可（Rime默认就是5个）
  # ------------------------------------------------------------------------------------------
  #style/horizontal: true # 默认是false竖排显示，删掉行首的#号，可横排显示（横排建议把上面这行注释掉）
  #style/layout/candidate_spacing: 17 #候选框改为横排后,增加 候选与候选 的间距
  #style/layout/hilite_spacing: 8  #候选框改为横排后,增加 标号与候选 的间距
  #style/layout/min_width: 80  #候选框改为横排后,增加最小宽度
  #style/layout/max_width: 1000 #候选框改为横排后，限制最大宽度，超长自动换行
  # 横排显示建议把下面这行也注释掉，换成阿拉伯数字标号
  # ------------------------------------------------------------------------------------------
  # menu/alternative_select_labels: [ ㊀, ㊁, ㊂, ㊃, ㊄, ㊅, ㊆, ㊇, ㊈ ]  # 自定义候选序号显示符，可自定修改，如要显示阿拉伯数字，直接注释掉这行（在前面加#号）
  # ------------------------------------------------------------------------------------------
  # 以下是备选样式（自行删除#号即可生效，只能生效一种）
  #menu/alternative_select_labels: [ ①,②,③,④,⑤,⑥,⑦,⑧,⑨,⑩ ]
  #menu/alternative_select_labels: [ ❶,❷,❸,❹,❺,❻,❼,❽,❾,❿ ]
  #menu/alternative_select_labels: [ ⓵,⓶,⓷,⓸,⓹,⓺,⓻,⓼,⓽,⓾ ]
  #menu/alternative_select_labels: [ ㊀,㊁,㊂,㊃,㊄,㊅,㊆,㊇,㊈,㊉ ]
  #menu/alternative_select_labels: [ ㈠,㈡,㈢,㈣,㈤,㈥,㈦,㈧,㈨,㈩ ]
  #menu/alternative_select_labels: [ 🀇,🀈,🀉,🀊,🀋,🀌,🀍,🀎,🀏,🀄 ]
  #menu/alternative_select_labels: [ Ⅰ,Ⅱ,Ⅲ,Ⅳ,Ⅴ,Ⅵ,Ⅶ,Ⅷ,Ⅸ,Ⅹ ]
  #menu/alternative_select_labels: [ ⅰ,ⅱ,ⅲ,ⅳ,ⅴ,ⅵ,ⅶ,ⅷ,ⅸ,ⅹ ]
  #menu/alternative_select_labels: [ Ⓐ,Ⓑ,Ⓒ,Ⓓ,Ⓔ,Ⓕ,Ⓖ,Ⓗ,Ⓘ,Ⓙ ]
  #menu/alternative_select_labels: [ ⓐ,ⓑ,ⓒ,ⓓ,ⓔ,ⓕ,ⓖ,ⓗ,ⓘ,ⓙ ]

  #style/preedit_type: preview # 嵌入首选项内容(字词)。有4个选项可设：input 嵌入输入码 | composition 嵌入编码 | preview 嵌入首选项 | preview_all 嵌入全部内容 
  #style/layout/margin_y : -1 # 启用后可隐藏候选框(盲打)，建议配合上面的嵌入首选项，一起使用
  #style/inline_preedit: false # 嵌入编码模式，默认是true开启，若想关闭，取消注释即可（删除前面的#号）

  # 去掉圆角 新小狼毫（Win）
  #style/layout/corner_radius: 0 #候选圆角
  #style/layout/round_corner: 0 #高亮圆角

  # #候选字体
  #style/font_face: "Consolas, Segoe UI Emoji, Noto Color Emoji, LXGW WenKai GB Screen R, SimSun, SimSun-ExtB, SimSun-ExtG, TH-Tshyn-P0, TH-Tshyn-P1, TH-Tshyn-P2, TH-Tshyn-P16"
  #style/font_point: 15 #主字体字号
  # #滤镜内容字体
  #style/comment_font_face: "Consolas, Segoe UI Emoji, Noto Color Emoji, TumanPUA, LXGW WenKai GB Screen R, SimSun, SimSun-ExtB, SimSun-ExtG, TH-Tshyn-P0, TH-Tshyn-P1, TH-Tshyn-P2, TH-Tshyn-P16"
  #style/comment_font_point: 15 # 滤镜内容字号
  # #候选前编号标志字体
  #style/label_font_face: "LXGW WenKai GB Screen R, SimSun, SimSun-ExtB, SimSun-ExtG, TH-Tshyn-P0, TH-Tshyn-P1, TH-Tshyn-P2, TH-Tshyn-P16"
  #style/label_font_point: 15 #候选前编号标志字号

  # 以下是解决 新狼毫候选框响应慢 的方法，删除下面四行前面的#号即可生效
  #style/color_font: false
  #style/font_face: LXGW WenKai GB Screen R
  #style/comment_font_face: LXGW WenKai GB Screen R
  #style/label_font_face: LXGW WenKai GB Screen R

  # 去除拼音滤镜的括号，如对括号有需求，可在下面5行前面加上#号注释掉
  #pinyin/comment_format:
   #- 'xform/&nbsp;/ /'
   #- 'xform/^/ /'
   #- 'xform/（//'
   #- 'xform/）//'
  # 也可自己把 （ 替换成别的，比如 'xform/（/〔/'

  # ------------------------------------------------------------------------------------------
  # rename emoji.json to emoji_cn.json, emoji.txt to emoji_cn.txt
  # ↓emoji表情滤镜
  emoji_cn/opencc_config: emoji_cn.json
  
  switches: # 0 默认关，1 默认开
    - name: ascii_mode
      # reset: 0
      reset: 1
      states: [ 中文, 西文 ]  #中英文状态
    - name: extended_char  #自定义字集
      reset: 1
      states: [ 全集 , 常用 ]
    - name: pinyin  #拼音滤镜
      reset: 0
      states: [ 拼, pīn ]
    - name: emoji_cn  #emoji滤镜
      reset: 0
      # states: [ 🈚, 🈶 ]
    - name: chaifen
      # reset: 0 
      reset: 1 
      states: [ 拆隐, 拆显 ]
    # - options: [ gb2312, gbk, utf8 ]
    #   states: [ gb2312, GBK, UTF-8 ]
    #   reset: 0
    - name: simplification  #简转繁滤镜
      reset: 0
      # states: [ 简中, 繁中 ]
    - options: [_keyboard_default, _keyboard_defaultbk, _keyboard_defaultwk]
      reset: 0
      states: [ 有刻, 半刻, 无刻 ]
    - name: charset_comment_filter  #字符集提示
      reset: 0  
      states: [ U区关, U区开 ]
    - name: udpf_switch
      reset: 0
      states: [ U编关, U编开]
    - name: ascii_punct
      reset: 0
      states: [ 。，, ．， ]
    # - name: dz_ci  #过滤词组
    #   reset: 0
    #   states: [ 词组, 单字 ]
    - options: [_keyboard_default, _keyboard_defaultzj]
      reset: 0
      states: [ 助记关, 助记开 ]
    # - name: fanjian  #繁转简滤镜
    #   reset: 0
    #   states: [ 反繁, 反简 ]
    - name: full_shape
      reset: 0
      # states: [ 半角, 全角 ]

  engine:
    processors:
      - ascii_composer
      - recognizer
      - key_binder
      - speller
      - punctuator
      # - lua_processor@exe_processor #exe启动器
      - lua_processor@*exe #exe启动器
      - selector
      - navigator
      - express_editor #计算
    segmentors:  # 分段
      - ascii_segmentor
      - matcher
      - affix_segmentor@easy_english #英文相关
      - abc_segmentor
      - punct_segmentor
      - fallback_segmentor
    translators:
      - punct_translator
      - reverse_lookup_translator #拼音反查
      - table_translator
      - table_translator@easy_english #临时英文
      - history_translator@historyDM # 重复上屏 电脑
      - history_translator@historyDM2 # 重复上屏 电脑2
      - history_translator@historyDM3 # 重复上屏 电脑3
      - history_translator@historySJ # 重复上屏 手机
      # - lua_translator@number_translator # 数字转大写
      - lua_translator@*number # 数字转大写
      # - lua_translator@calculator_translator # 简易计算器
      - lua_translator@*calculator_translator # 简易计算器
      # - lua_translator@shijian2_translator # 高级时间
      - lua_translator@*shijian2 # 高级时间


    filters:
      # - lua_filter@core2022  #自定义字集过滤lua；放在最上面完美解决简繁滤镜出错的问题
      - lua_filter@*core2022_filter  #自定义字集过滤lua；放在最上面完美解决简繁滤镜出错的问题
      # - lua_filter@dz_ci  #过滤词组lua，单字模式
      # - charset_filter@utf8
      # - charset_filter@gbk
      # - charset_filter@gb2312
      # - charset_filter@big5
      - simplifier@simplification  #简繁滤镜
      # - simplifier@fanjian  #繁简滤镜
      # - reverse_lookup_filter@reverse_lookup #反查词典滤镜
      - simplifier@pinyin  #拼音滤镜
      - simplifier@chaifen #拆分滤镜
      - simplifier@emoji_cn  #表情滤镜
      # - lua_filter@charset_comment_filter #Unicode分区提示滤镜
      - lua_filter@*charset_comment_filter #Unicode分区提示滤镜
      # - lua_filter@lua_unicode_display_filter #Unicode编码显示
      - lua_filter@*unicode_display #Unicode编码显示
      - uniquifier #过滤重复

  key_binder:
    #  import_preset: default
    bindings:
      #- { when: composing, accept: Return, send: Escape }
      #- { accept: space, send: space, when: has_menu } #有候选时空格上屏首选
      #- { accept: space, send: Escape, when: composing } #无候选时(空码)空格清屏
      - { accept: semicolon, send: 2, when: has_menu } # 分号次选
      - { when: has_menu, accept: apostrophe, send: 3 } # 引号三选
      - { when: composing, accept: Tab, send: Escape } # tab清屏
      - { when: has_menu, accept: minus, send: Page_Up } # - 向后翻页
      - { when: has_menu, accept: equal, send: Page_Down } # = 向前翻页
      # - { when: composing, accept: bracketleft, send: Page_Up } # [ 后翻
      # - { when: composing, accept: bracketright, send: Page_Down } # ] 前翻
      # - { accept: "Control+o", toggle: simplification, when: composing }  # 简繁开关
      # - { accept: "Control+Shift+O", toggle: fanjian, when: composing }  # 繁简开关
      # - { accept: "Control+p", toggle: pinyin, when: composing }  # PC 拼音开关
      # - { accept: "Control+i", toggle: emoji_cn, when: composing }  # PC emoji开关
      # - { accept: "Control+u", toggle: charset_comment_filter, when: composing }  # PC Unicode分区开关
      # - { accept: "Control+y", toggle: udpf_switch, when: composing }  #PC Unicode编码开关
      # - { accept: "Control+h", toggle: extended_char, when: composing } # PC 自定字集开关
      # - { accept: "Control+Shift+H", toggle: extended_char, when: composing } # PC 自定字集开关2
      # - { accept: "Control+j", toggle: chaifen, when: composing } # PC 拆分滤镜开关
      # - { when: composing, accept: '&', toggle: emoji_cn } # 手机 emoji开关
      # - { when: composing, accept: '*', toggle: simplification } # 手机 繁简开关
      # - { when: composing, accept: '\', toggle: pinyin } # 手机 拼音开关
      # - { when: composing, accept: '^', toggle: charset_comment_filter } # 手机 Unicode分区开关1
      # - { when: composing, accept: '#', toggle: charset_comment_filter } # 手机 Unicode分区开关2
      # - { accept: "%", toggle: udpf_switch, when: composing }  #手机 Unicode编码开关
      # - { accept: "+", toggle: udpf_switch, when: composing }  #手机 Unicode编码开关
      # - { when: composing, accept: '_', toggle: extended_char} # 手机 自定字集开关1
      # - { when: composing, accept: ':', toggle: extended_char} # 手机 自定字集开关2
      # - { when: composing, accept: '"', toggle: chaifen } # 手机 拆分滤镜开关
      - { when: has_menu, accept: Right, send: Down } # 右方向键 向后移动焦点
      - { when: has_menu, accept: Left, send: Up } # 左方向键 向前移动焦点
      # - { when: always, accept: "Control+period" , toggle: ascii_punct } # 中英标点切换
      # - { when: always, accept: "Shift+space" , toggle: full_shape } # 全半角切换
      # 在最近的两个方案之间切换
      - { when: always, accept: Control+Shift+bracketleft, select: .next }
