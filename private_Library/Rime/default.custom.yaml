# default.yaml的补丁文件是default.custom.yaml
# https://dvel.me/posts/rime-ice/#%E4%BB%A5-patch-%E7%9A%84%E6%96%B9%E5%BC%8F%E6%89%93%E8%A1%A5%E4%B8%81
patch:
  # 方案列表
  schema_list:
    # 可以直接删除或注释不需要的方案，对应的 *.schema.yaml 方案文件也可以直接删除
    # 除了 t9，它依赖于 rime_ice，用九宫格别删 rime_ice.schema.yaml
    - schema: double_pinyin_flypy    # 小鹤双拼
    - schema: rime_ice               # 雾凇拼音（全拼）
    - schema: flypy                  # 小鹤音形 (小鹤官方挂接, 非rime-ice)
    # - schema: t9                     # 雾凇拼音（九宫格）
    # - schema: double_pinyin          # 自然码双拼
    # - schema: double_pinyin_abc      # 智能 ABC 双拼
    # - schema: double_pinyin_mspy     # 微软双拼
    # - schema: double_pinyin_sogou    # 搜狗双拼
    # - schema: double_pinyin_ziguang  # 紫光双拼

  # 一例、定製每頁候選數
  # "menu/page_size": 9
  # "menu/page_size": 7

  # 方案选单相关
  switcher/hotkeys:
    # - F4
    - Control+grave
    # - Alt+grave
    # - Control+Shift+grave

  # 切换中英：
  # 不同的选项表示：打字打到一半时按下了 CapsLock、Shift、Control 后：
  # commit_code  上屏原始的编码，然后切换到英文
  # commit_text  上屏拼出的词句，然后切换到英文
  # clear        清除未上屏内容，然后切换到英文
  # inline_ascii 切换到临时英文模式，按回车上屏后回到中文状态
  # noop         屏蔽快捷键，不切换中英，但不要屏蔽 CapsLock
  # 切换中英快捷键由 left_shift 改为 right_control (交换 : 和 ; 后按 shift+; 会触发鼠须管 shift 切换中英文)
  # 改为 right_control 后, 在 VSCode 和 tidgi (均开启 vim 模式) 中切换中英文经常不灵
  # ascii_composer/switch_key/Shift_L: noop
  # ascii_composer/switch_key/Control_R: commit_code

  ##### 结尾的 /+ 表示在原基础上追加
  # 保留已有的快捷键，追加
  key_binder/bindings/+:
    # 翻页 , .
    - { when: paging, accept: comma, send: Page_Up }
    - { when: has_menu, accept: period, send: Page_Down }

    # 翻页 [ ]
    # - { when: paging, accept: bracketleft, send: Page_Up }
    # - { when: has_menu, accept: bracketright, send: Page_Down }

    # emacs_editing:
    - { when: composing, accept: Control+p, send: Up }
    - { when: composing, accept: Control+n, send: Down }
    - { when: composing, accept: Control+b, send: Left }
    - { when: composing, accept: Control+f, send: Right }
    - { when: composing, accept: Control+a, send: Home }
    - { when: composing, accept: Control+e, send: End }
    - { when: composing, accept: Control+d, send: Delete }
    - { when: composing, accept: Control+k, send: Shift+Delete }
    - { when: composing, accept: Control+h, send: BackSpace }
    - { when: composing, accept: Control+g, send: Escape }
    - { when: composing, accept: Control+bracketleft, send: Escape }
    - { when: composing, accept: Control+y, send: Page_Up }
    - { when: composing, accept: Alt+v, send: Page_Up }
    - { when: composing, accept: Control+v, send: Page_Down }

    # optimized_mode_switch:
    # 在最近的两个方案之间切换
    # - { when: always, accept: Control+Shift+space, select: .next }
    - { when: always, accept: Control+Shift+bracketleft, select: .next }
    # 切换中英
    # - { when: always, accept: Shift+space, toggle: ascii_mode }
    - { when: always, accept: Control+Shift+bracketright, toggle: ascii_mode }
    # 切换中英标点
    # - { when: always, accept: Control+period, toggle: ascii_punct }

    # https://github.com/ssnhd/rime
    # https://github.com/LEOYoon-Tsaw/Rime_collections/blob/master/Rime_description.md#%E7%A4%BA%E4%BE%8B-10
    - { when: has_menu, accept: semicolon, send: 2 }              # ":" (分号)选择第 2 个候选词
    # 影响全拼单引号分词，改为小鹤双拼方案专有快捷键
    # - { when: has_menu, accept: apostrophe, send: 3 }             # "'" (引号)选择第 3 个候选词

  # Lua 配置: 以词定字（上屏当前词句的第一个或最后一个字）
  key_binder/select_first_character: "bracketleft" # 即 [
  key_binder/select_last_character: "bracketright" # 即 ]
