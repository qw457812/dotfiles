# https://github.com/gokcehan/lf/blob/master/doc.md
# `:doc` in lf
# Show hidden files
set hidden true
# Jump to the first match after each keystroke during searching
set incsearch true
# Set the interval in seconds for periodic checks of directory updates (default 0)
set period 1

# PREFIXES
# The following command prefixes are used by lf:
# :  read (default)  builtin/custom command
# $  shell           shell command
# %  shell-pipe      shell command running with the UI
# !  shell-wait      shell command waiting for a key press
# &  shell-async     shell command running asynchronously
map U !du -csh *

# https://github.com/gokcehan/lf/wiki/Tips
# repeating the previous command
map . :read; cmd-history-prev; cmd-enter

# copy file path
cmd yank_path %{{
    # Oh My Zsh built-in lib function clipcopy
    if type clipcopy > /dev/null 2>&1; then
    printf '%s' "$f" | clipcopy
    # uses pbcopy on OS X and xsel on Linux
    elif type pbcopy > /dev/null 2>&1; then
    printf '%s' "$f" | pbcopy
    elif type xsel > /dev/null 2>&1; then
    printf '%s' "$f" | xsel -ib
    fi
}}
map Y :yank_path

# https://github.com/gokcehan/lf/blob/master/etc/lfrc.example
# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
# cmd open &$OPENER "$f" | `:doc` in lf
map o &$OPENER $f

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open &{{
    case $(file --mime-type -Lb $f) in
        text/*) lf -remote "send $id \$$EDITOR \$fx";;
        *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# mkdir command. See wiki if you want it to select created dir
map a :push %mkdir<space>

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# TODO trash-cli
# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash
# https://github.com/gokcehan/lf/blob/master/doc.md
map D trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete
map <backspace2> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.tar) tar xvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# https://github.com/gokcehan/lf/wiki/Integrations
# zoxide
cmd z %{{
	result="$(zoxide query --exclude $PWD $@ | sed 's/\\/\\\\/g;s/"/\\"/g')"
	lf -remote "send $id cd \"$result\""
}}
map zz push :z<space>

cmd zi ${{
	result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
	lf -remote "send $id cd \"$result\""
}}

cmd on-cd &{{
  zoxide add "$PWD"

	# display repository status in your prompt
	if [ -d .git ] || [ -f .git ]; then
		branch=$(git branch --show-current 2>/dev/null) || true
		remote=$(git config --get branch.$branch.remote 2>/dev/null) || true
		url=$(git remote get-url $remote 2>/dev/null) || true
		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [GIT BRANCH:> $branch >> $url]\033[0m"
	elif [ -d .hg ]; then
		hg=$(hg branch 2>/dev/null) || true
		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [HG BRANCH:> $hg]\033[0m"
	elif [ -d .svn ]; then
		svn=$(svn info 2>/dev/null | awk '/^URL: /{print $2}') || true
		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%w\033[0m\033[33;1m [SVN URL:> $svn]\033[0m"
	else
		fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f\033[0m"
	fi
	lf -remote "send $id set promptfmt \"$fmt\""
}}

# eza
cmd on-select &{{
    lf -remote "send $id set statfmt \"$(eza --long --all --git --time-style=iso --group --color=always --color-scale all --list-dirs "$f")\""
}}

# fzf
# map f $$EDITOR $(fzf)
cmd fzf_find $lf -remote "send $id select \"$(fzf --reverse --header='Find file')\""
map gf :fzf_find

# ripgrep
cmd fzf_search ${{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    [ -n "$res" ] && lf -remote "send $id select \"$res\""
}}
map gs :fzf_search

# git
cmd git_branch ${{
    git branch | fzf | xargs git checkout
    pwd_shell=$(pwd | sed 's/\\/\\\\/g;s/"/\\"/g')
    lf -remote "send $id updir"
    lf -remote "send $id cd \"$pwd_shell\""
}}
map gB :git_branch
map gP ${{clear; git pull --rebase || true; echo "press ENTER"; read ENTER}}
map gS ${{clear; git status; echo "press ENTER"; read ENTER}}
map gL ${{clear; git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit}}

# shortcut
map gc cd ~/.config
map gd cd ~/Documents
map gD cd ~/Downloads

# TODO https://github.com/aharoJ/lf-config/blob/main/lfrc
# TODO https://github.com/jiu-chen/my-lfrc/blob/main/lfrc
