" vim: filetype=vifm :
" Sample configuration file for vifm on OSX (last updated: 19 March, 2024)
" You can edit this file by hand.
" The " character at the beginning of a line comments out the line.
" Blank lines are ignored.
" The basic format for each item is shown with an example.

" Check update manually before official release:
" https://github.com/vifm/vifm/blob/master/data/vifmrc-osx

" ------------------------------------------------------------------------------
" Main settings
" ------------------------------------------------------------------------------

" Command used to edit files in various contexts.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.
"
" Mind that due to `filetype * open` below by default the editor won't be used
" for opening files via l/Enter keys.  Comment that line out to change the
" behaviour.
" if executable('vim')
"     set vicmd=vim
" elseif executable('nvim')
"     set vicmd=nvim
" elseif executable('elvis')
"     set vicmd=elvis\ -G\ termcap
" elseif executable('vile')
"     set vicmd=vile
" elseif $EDITOR != ''
"     echo 'Note: using `'.$EDITOR.'` as an editor'
"     let &vicmd = $EDITOR
" endif
if executable('nvim')
    set vicmd=nvim
elseif executable('vim')
    set vicmd=vim
elseif executable('elvis')
    set vicmd=elvis\ -G\ termcap
elseif executable('vile')
    set vicmd=vile
elseif $EDITOR != ''
    echo 'Note: using `'.$EDITOR.'` as an editor'
    let &vicmd = $EDITOR
endif

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.
set syscalls

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.
set trash

" What should be saved automatically on restarting vifm.  Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
" set vifminfo=dhistory,savedirs,chistory,state,tui,tabs,shistory,ehistory,
"             \phistory,fhistory,dirstack,registers,bookmarks,bmarks,mchistory
set vifminfo=dhistory,chistory,state,tui,tabs,shistory,ehistory,
            \phistory,fhistory,dirstack,registers,bookmarks,bmarks,mchistory

" This is how many directories to store in the directory history.
" set history=100
set history=1000

" Automatically resolve symbolic links on l or Enter.
set nofollowlinks

" Natural sort of (version) numbers within text.
set sortnumbers

" Maximum number of changes that can be undone.
" set undolevels=100
set undolevels=1000

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.
set vimhelp

" If you would like to run an executable file when you
" press Enter, l or Right Arrow, set this.
set norunexec

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.
set timefmt='%Y/%m/%d %H:%M'

" Show list of matches on tab completion in command-line mode
set wildmenu

" Display completions in a form of popup with descriptions of the matches
set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.
set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter
set ignorecase
set smartcase

" Don't highlight search results automatically
set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists
set scrolloff=4

" Don't do too many requests to slow file systems
set slowfs=curlftpfs

" Set custom status line look
" set statusline="  Hint: %z%= %A %10u:%-7g %15s %20d  "
" https://q2a.vifm.info/1769/how-to-show-links-full-path
" set statusline="  %t%[ -> %T%]%= %A %10u:%-7g %15s %20d  "
" set statusline="%A %7s %13u:%-7g %15d   %t%[ -> %T%]%= Hint: %z"

" List of color schemes to try (picks the first one supported by the terminal)
" colorscheme Default-256 Default
colorscheme papercolor-dark gruvbox molokai zenburn_1 Default-256 Default

" ------------------------------------------------------------------------------
" Bookmarks
" ------------------------------------------------------------------------------

" :mark mark /full/directory/path [filename]

mark b ~/bin/
mark h ~/
mark c ~/.config/
mark d ~/Downloads/
mark D ~/Documents/

" ------------------------------------------------------------------------------
" Commands
" ------------------------------------------------------------------------------

" :com[mand][!] command_name action
"
" These are some of the macros that can be used in the action part:
"  %a for user arguments
"  %c for current file under the cursor
"  %C for current file under the cursor of inactive pane
"  %f for selected file(s)
"  %F for selected file(s) of inactive pane
"  %b is the same as %f %F
"  %d for current directory name
"  %D for current directory name of inactive pane
"  %r{x} for list of files in register {x}
"  %m runs the command in a menu window
"  %u uses command's output to build a file list
"  see `:help vifm-macros` and `:help vifm-filename-modifiers` for more

command! df df -h %m 2> /dev/null
" command! diff vim -d %f %F
command! diff nvim -d %f %F
command! zip zip -r %c.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! reload :write | restart full

" ------------------------------------------------------------------------------
" File types association
" ------------------------------------------------------------------------------

" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
"
" The first entry is the default program to be used with a matching file.
" The other programs for the file type can be accessed via :file command.
" The command macros like %f, %F, %d, %D may be used in the commands.
" The %a macro is ignored.  To use a % you must put %%.
" Spaces in an app name must be escaped, for example: QuickTime\ Player.app

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of the following formats:
"
" :filetype patterns FUSE_MOUNT|mount_cmd %SOURCE_FILE %DESTINATION_DIR
"
" %SOURCE_FILE and %DESTINATION_DIR are filled in at runtime.
"
" Example:
"   :filetype *.zip,*.[jwe]ar FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype patterns FUSE_MOUNT2|mount_cmd %PARAM %DESTINATION_DIR
"
" %PARAM and %DESTINATION_DIR are filled in at runtime.
"
" Example:
"   :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
"
" %PARAM value is the first line of the matched file, example: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.  There is also %FOREGROUND, which is useful for entering passwords.

" Pdf
" filetype {*.pdf},<application/pdf>
"        \ {Open in Preview}
"        \ open -a Preview.app,
"        \ {Open in Skim}
"        \ open -a Skim.app,
filetype {*.pdf},<application/pdf>
       \ {Open in Zathura}
       \ zathura %c %i &,
       \ {Open in Preview}
       \ open -a Preview.app,
fileviewer {*.pdf},<application/pdf> pdftotext -nopgbrk %c -

" PostScript
filetype {*.ps,*.eps,*.ps.gz},<application/postscript> open -a Preview.app

" Djvu
filetype {*.djvu},<image/vnd.djvu> open -a MacDjView.app

" Audio
filetype {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus,
         \*.aac,*.mpga},
        \<audio/*>
       \ {Open in Music}
       \ open -a Music.app,
       \ {Open in QuickTime Player}
       \ open -a QuickTime\ Player.app,
       \ {Open in IINA}
       \ open -a IINA.app,
fileviewer {*.wav,*.mp3,*.flac,*.m4a,*.wma,*.ape,*.ac3,*.og[agx],*.spx,*.opus,
           \*.aac,*.mpga},
          \<audio/*>
         \ ffprobe -hide_banner -pretty %c 2>&1

" Video
filetype {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
         \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
         \*.as[fx],*.unknown_video},
        \<video/*>
       \ {Open in QuickTime Player}
       \ open -a QuickTime\ Player.app,
       \ {Open in IINA}
       \ open -a IINA.app,
       \ {Open in VLC}
       \ open -a VLC.app,
fileviewer {*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
           \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
           \*.as[fx],*.unknown_video},
          \<video/*>
         \ ffprobe -hide_banner -pretty %c 2>&1

" Source code
filetype {*.org},
       \ {Open in Emacs}
       \ open -a Emacs.app,
       \ {Open in nvim}
       \ nvim,
" https://github.com/rockyzhang24/dotfiles/blob/master/.config/vifm/vifmrc
fileviewer *.[ch],*.[ch]pp,*.html,*.css,*.less,*.js,*.java,*.go,*.py,*.coffee,*.dart,*.lua,*.md,*.rb,*.ts,*.php,*.cs,*.vim,*.conf,*.swift,*.json,*.xml,*.org,Makefile,Makefile.* bat --color=always --wrap=never --paging=never --style=plain %c

" Web
" filetype {*.xhtml,*.html,*.htm},<text/html>
"        \ {Open in Safari}
"        \ open -a Safari.app,
"        \ {Open in Firefox}
"        \ open -a Firefox.app,
"        \ {Open in Chrome}
"        \ open -a Google\ Chrome.app,
"        \ {Open in vim}
"        \ vim,
filetype {*.html},<text/html>
       \ {Open in nvim}
       \ nvim,
       \ {Open in Brave}
       \ open -a Brave\ Browser.app,
       \ {Open in Chrome}
       \ open -a Google\ Chrome.app,
filetype {*.xhtml,*.htm},<text/html>
       \ {Open in Brave}
       \ open -a Brave\ Browser.app,
       \ {Open in Chrome}
       \ open -a Google\ Chrome.app,
       \ {Open in nvim}
       \ nvim,
fileviewer {*.xhtml,*.html,*.htm},<text/html> w3m -dump -T text/html

" Object
filetype {*.o},<application/x-object> nm %f | less

" Man page
filetype {*.[1-8]},<text/troff> man ./%c
fileviewer {*.[1-8]},<text/troff> man ./%c | col -b

" Image
filetype {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
       \ open -a Preview.app,
fileviewer {*.bmp,*.jpg,*.jpeg,*.png,*.gif,*.xpm},<image/*>
         \ identify %f
" https://github.com/rockyzhang24/dotfiles/blob/master/.config/vifm/vifmrc
" https://github.com/kovidgoyal/kitty/issues/1308
" https://github.com/vifm/vifm/issues/731#issuecomment-1445124018
" fileviewer *.png
"     \ kitten icat --silent --transfer-mode=file --place=%pwx%ph@%pxx%py %c >/dev/tty </dev/tty %N
"     \ %pc
"     \ kitten icat --clear --silent >/dev/tty </dev/tty %N

" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ shasum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ shasum -a 256 -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ shasum -a 512 -c %f %S,

" Torrent
filetype {*.torrent},<application/x-bittorrent> open -a Transmission.app
fileviewer {*.torrent},<application/x-bittorrent>
         \ dumptorrent -v %c,
         \ transmission-show %c

" Extract zip files
filetype {*.zip},<application/zip,application/java-archive>
       \ mkdir %f:r && tar -vxf %f --directory %f:r
fileviewer {*.zip,*.jar,*.war,*.ear},
          \<application/zip,application/java-archive>
          \ tar -tf %f

" Extract tar archives
filetype {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.tar.zst,
         \*.tzst},
        \<application/x-tar>
       \ tar -vxf %f
fileviewer {*.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz,*.tar.xz,*.txz,*.tar.zst,
           \*.tzst},
          \<application/x-tar>
         \ tar -tf %f

" Extract .bz2 archives
filetype *.bz2 bzip2 -d %f

" Extract .gz files
filetype *.gz gunzip %f

" Extract rar files
filetype *.rar unrar x -y -c- -ad %f %s
fileviewer *.rar unrar lb %c

" Mount .dmg archives
filetype *.dmg open

" Mount disk .img
filetype *.img open

" Open .pkg binaries
filetype *.pkg open

" Office files
filetype {*.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx,*.ppt},
         \<application/vnd.openxmlformats-officedocument.*,
          \application/msword,
          \application/vnd.ms-excel>
       \ open -a LibreOffice.app
fileviewer {*.doc},<application/msword> antiword -
" fileviewer {*.docx},
"           \<application/
"            \vnd.openxmlformats-officedocument.wordprocessingml.document>
"          \ docx2txt.pl %f -
" https://github.com/ObserverOfTime/home.files/blob/master/.config/vifm/vifmrc
fileviewer *.epub pandoc -f epub -t plain %c
fileviewer *.docx pandoc -f docx -t plain %c
fileviewer *.odt pandoc -f odt -t plain %c
fileviewer *.ipynb pandoc -f ipynb -t gfm %c
" https://q2a.vifm.info/1227/how-do-i-preview-office-files
" https://github.com/dilshod/xlsx2csv
fileviewer *.xlsx xlsx2csv %c | bat --color=always --wrap=never --paging=never --style=plain --language=csv

" TODO column: line too long
" CSV/Excel | https://github.com/sdushantha/dotfiles/blob/master/vifm/.config/vifm/vifmrc
" fileviewer *.csv sed "s/,,,,/,,-,,/g;s/,,/ /g" %c | column -t | sed "s/ - /  /g" | cut -c -%pw
" https://stackoverflow.com/questions/1875305/view-tabular-file-such-as-csv-from-command-line
" fileviewer *.csv cat %c | column -s, -t

" https://q2a.vifm.info/1555/how-set-fileviewer-for-all-files-that-contains-readable-text
" Text based files | https://github.com/sdushantha/dotfiles/blob/master/vifm/.config/vifm/vifmrc
" fileviewer <text/*> bat --color=always --wrap=never --paging=never --style=plain %c
" fileviewer <text/*> pygmentize -O style=one-dark -f console256 -g

" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
" fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
" fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
" fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
" fileviewer *[^/] pygmentize -O style=monokai -f console256 -g
" `.*[^/]` for .zshrc
" ~/.config/vifm/scripts/defviewer
fileviewer *[^/],.*[^/] defviewer %c

" Displaying pictures in terminal
" fileviewer *.jpg,*.png shellpic %c

" https://q2a.vifm.info/1677/fileviewer-for-git-directories
fileviewer .git/ git -c color.status=always status --short --branch %d %pu

" Customize directory preview (only works in double-pane mode, not in single-pane mode)
" https://github.com/vifm/vifm/issues/628
" there is builtin code for drawing a tree since v0.8.1 (because `tree` isn't always
" installed by default on Linux and its equivalent on Windows caused trouble).
" Builtin implementation is used only if no viewer matches directories (`*` pattern
" matches all files including directories).
"
" Comment these lines out to use the default builtin tree viewer
fileviewer {*/,.*/},
         \ eza --all --level=2 --ignore-glob='.git|.idea' --tree --color=always --color-scale all --long --time-style=iso --git --no-permissions --no-user %c,
         \ tree -a -L 2 -I '.git|.idea' -C %c,
         \ eza --all --color=always --oneline %c,
         \ ls -A --color=always %c

" Other files
" https://github.com/sdushantha/dotfiles/blob/master/vifm/.config/vifm/vifmrc
" the reason why I am using "file" to preview other files is so that "vifm"
" does not lag when trying "cat" the file
" `.*` for .DS_Store
" fileviewer *,.* file %c

" Open all other files with default system programs (you can also remove all
" :file[x]type commands above to ensure they don't interfere with system-wide
" settings).  Use of the line below results in ignoring 'vi[x]cmd' option for
" unknown file types on l/Enter keys.
" filetype * open

" ------------------------------------------------------------------------------
" Panel configuration examples
" ------------------------------------------------------------------------------

" Customize view columns a bit (enable ellipsis for truncated file names)
" set viewcolumns=-{name}..,6{}.

" Show vertical border
" set fillchars=vborder:│

" Filter-out build and temporary files
" filter! {*.lo,*.o,*.d,*.class,*.pyc,*.pyo,.*~}

" ------------------------------------------------------------------------------
" Sample keyboard mappings
" ------------------------------------------------------------------------------

" Start shell in current directory
nnoremap s :shell<cr>

" Display sorting dialog
nnoremap S :sort<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv
" TODO https://wiki.vifm.info/index.php/Single-pane_preview
" nnoremap <silent> w : if &quickview && !layoutis('only')
"                    \|     view
"                    \| else
"                    \|     if layoutis('only')
"                    \|         if &lines + 50 < &columns | vsplit | else | split | endif
"                    \|     endif
"                    \|     view!
"                    \|     execute 'qnoremap w q:view|only|qunmap w<lt>cr>'
"                    \|     execute 'wincmd w'
"                    \| endif
"                    \| <cr>

" TODO l Enter o
" Open file in new MacVim tab
" nnoremap o :!mvim --remote-tab-silent %f<cr>
" nnoremap o :!nvim %f<cr>
nnoremap o :!open %f<cr>
" Open file in new MacVim window
" nnoremap O :!mvim %f<cr>
nnoremap O :!open %f -a<space>

" Open file in the background using its default program
nnoremap gb :!open -g %f<cr>

" Yank current directory path into the clipboard
nnoremap yd :!printf %d | pbcopy<cr>

" Yank current file path into the clipboard (escape spaces)
nnoremap yf :!printf %f:p:gs? ?\\ ? | pbcopy<cr>

" View preview in Quick Look
" nnoremap <space> :!qlmanage -p %f > /dev/null 2>&1<cr>
nnoremap ,<space> :!qlmanage -p %f > /dev/null 2>&1<cr>

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
nnoremap A cw

" As above, but without the file extension
" nnoremap I cW<c-a>
" nnoremap cc cW<c-u>
" nnoremap A cW

" Open editor to edit vifmrc and apply settings after returning to vifm
" nnoremap ,c :write | edit $MYVIFMRC | restart full<cr>
" edit vifmrc with chezmoi
" nnoremap ,c :write | edit $MYVIFMRC | let $CZ_IGNORED = term("chezmoi add $MYVIFMRC") | restart full<cr>
" https://wiki.vifm.info/index.php/Configuration_model
" To be able to use another command after one of these, wrap it with the :execute command | https://vifm.info/manual.shtml
" by my test, `:write | restart` can retore the inactive tab's directory position, but `:write | restart full` can't
nnoremap ,c :write | execute ':!%nchezmoi edit --apply --verbose $MYVIFMRC' | restart full<cr>
" Open MacVim to edit vifmrc
" nnoremap ,C :!mvim --remote-tab-silent $MYVIFMRC &<cr>

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>

" Example of standard two-panel file managers mappings
nnoremap <f3> :!less %f<cr>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

" Midnight commander alike mappings
" Open current directory in the other pane
nnoremap <a-i> :sync<cr>
" Open directory under cursor in the other pane
nnoremap <a-o> :sync %c<cr>
" Swap panes
nnoremap <c-u> <c-w>x

" ------------------------------------------------------------------------------
" Various customization examples
" ------------------------------------------------------------------------------

" Use ag (the silver searcher) instead of grep
" set grepprg='ag --line-numbers %i %a %s'

" Add additional place to look for executables
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername

" Activate screen/tmux support
" screen!

" ------------------------------------------------------------------------------
" Icon decorations example
" ------------------------------------------------------------------------------

" https://github.com/cirala/vifm_devicons

" ------------------------------------------------------------------------------
" My
" ------------------------------------------------------------------------------

" https://wiki.vifm.info/index.php/FAQ#How_to_show_hidden_files_by_default_on_startup.3F
" Show dotfiles/dotdirs
set dotfiles

" https://wiki.vifm.info/index.php/Sort_dotfiles/dotdirs_separately_from_other_files/directories
" Sort dotfiles/dotdirs separately from other files/directories
" By (ab)using the `sortgroups` option, you can split all the listed files into two groups - one containing items with a `.` prefix, and one containing all the other items.
" set sortgroups='(|\.).*' " Regexp error in (|\.).*: empty (sub)expressio
set sortgroups='(^|\.).*'
" Ultimately, we get the following order - directories, files, dotdirs, dotfiles
set sort=+groups,+dir,+name

" Show file and directory preview in right pane (only works in double-pane mode, not in single-pane mode)
" Note that `:view!` same as `:set quickview`
" :view!
" set quickview
set noquickview

" start with single-pane mode, even by `vifm <path> <path>` or vifm was in double-pane mode on finishing previous run | https://vifm.info/manual.shtml
:only

" vifm can be used like ranger's column view
set millerview

" For double-pane mode:
" Example of two-column mode which is useful in combination with :view command: | https://vifm.info/manual.shtml
" default: "lsize:1,csize:1,rsize:1,rpreview:dirs"
" set milleroptions=lsize:1,csize:2
"
" maxtreedepth:num 0 max number of levels in preview tree
" 0 for maxtreedepth means "unlimited", 1 will only show selected directory, 2 adds its children, and so forth.
" set previewoptions=graphicsdelay:50000,maxtreedepth:2

" For single-pane mode:
" Yazi's manager.ratio | https://github.com/sxyazi/yazi/blob/latest/yazi-config/preset/yazi.toml
set milleroptions=lsize:1,csize:4,rsize:3,rpreview:all

" https://github.com/ObserverOfTime/home.files/blob/master/.config/vifm/vifmrc
" Controls how size of directories is displayed in file views
set dirsize=nitems

" Toggle between single <--> double pane mode (combination with `:only`, `:set millerview`, `:view`)
" Note that `:wincmd H` same as `<c-w>H` | https://q2a.vifm.info/649/view-pane-always-on-the-right-side
"
" double-pane mode:
"     1. `set noquickview`
"     2. `set nomillerview` for both active pane and inactive pane
"     3. position current pane on the left using `:wincmd H`
"
" single-pane mode (default):
"     1. `set noquickview`
"     2. `set millerview` and `set milleroptions=...` for both active pane and inactive pane
command! togglepane : set noquickview
                   \| if layoutis('only')
                   \|     vsplit
                   \|     set nomillerview
                   \|     execute 'wincmd H'
                   \|     execute 'wincmd w'
                   \|     set nomillerview
                   \|     execute 'wincmd w'
                   \| else
                   \|     only
                   \|     set millerview
                   \|     set milleroptions=lsize:1,csize:4,rsize:3,rpreview:all
                   \|     execute 'wincmd w'
                   \|     set millerview
                   \|     set milleroptions=lsize:1,csize:4,rsize:3,rpreview:all
                   \|     execute 'wincmd w'
                   \| endif
nnoremap <silent> W :togglepane<cr>
vnoremap <silent> W :togglepane<cr>gv

" Quit vifm
" nnoremap q :q<cr>
nnoremap q :wqall<cr>

" edit forward search pattern in editor
nnoremap ,/ q/
" edit cmdline in editor
nnoremap ,: q:
nnoremap ,; q:
" edit local filter pattern in editor
nnoremap ,= q=
" edit backward search pattern in editor
nnoremap ,? q?

" Single stroke to access command line | https://wiki.archlinux.org/title/Vifm
nmap ; :

" https://github.com/kyoheiu/felix#key-manual
" https://wiki.vifm.info/index.php/Creating_directories_and_files_with_a_single_command
" Create a file or directory (ends with "/" for directories) | https://yazi-rs.github.io/docs/quick-start#filedirectory-operations
" Note: create intermediate directories as required (mkdir -p a/b/c), like `:create a/b/c/` or `:create a/b/c`
" or use `execute ':!mkdir -p "$(dirname "%a")" && touch "%a"'` in `else` branch
command create :
\|  let $last_char = expand(system("str=\"%a\"; echo \"${str: -1}\""))
\|  if $last_char == "/"
\|    mkdir! "%a"
\|  else
\|    let $dir_name = system('dirname "%a"')
\|    if $dir_name != '.'
\|        execute 'mkdir!' fnameescape($dir_name)
\|    endif
\|    touch "%a"
\|  endif
" nnoremap a :create<space>
nnoremap i :create<space>

nnoremap cd :cd<space>

" Author of vifm: https://github.com/xaizek/dotvifm/blob/master/vifmrc
" ==============================================================================
" nesting detection

if $INSIDE_VIFM != ''
    let $SL_PREFIX = 'vifm '
else
    if $PS1 != ''
        let $SL_PREFIX = 'bash '
    endif
    let $INSIDE_VIFM = 'true'
endif

" ==============================================================================
" appearance

" hide side borders
set tuioptions-=s
if $TERM != 'linux'
    " use Unicode ellipsis
    set tuioptions+=u
endif

" change appearance of middle border
set fillchars=vborder:·

" ==============================================================================
" various options

" allow partially entered external commands with unambiguous beginning using :!
" set fastrun

" completely disable compatibility with older versions:
" * make yy and dd ignore selection and work with file under the cursor;
" * make <c-i> (and <tab>) work in same way as in Vim (go forward in history).
set cpoptions-=fst

" don't wrap long lines in preview pane
set nowrap

" hide .. directory everywhere
set dotdirs=

" ==============================================================================
" custom status line look

let &statusline = ''
" see "nesting detection" above
if $SL_PREFIX != ''
    let &statusline .= $SL_PREFIX.'| '
endif
let &statusline .= '%A %7s %13u:%-7g %15d   %t%[ -> %T%]%= Hint: %z'

" ==============================================================================
" various mappings

" use < and > without ctrl-w prefix key in normal mode
nnoremap < <c-w><
nnoremap > <c-w>>

" moving cursor in another pane
nnoremap <silent> J <space>j<space>
nnoremap <silent> K <space>k<space>

" moving though sibling directories
nnoremap <c-j> ]R
nnoremap <c-k> [R

" faster search of files that start with a particular string
nnoremap f/ /^

" substitute in all files
nnoremap as :%s/

" force file editing rather than opening it
nnoremap E :edit<cr>

" use space and shift-tab as tab in quick view mode
qnoremap <space> <tab>
qnoremap <s-tab> <tab>

" toggle between sorting: by name <--> by size <--> by mtime
command! togglesort
         \ :if &sort == '-size,+name'
         \ |    set sort=+mtime
         \ |    echo 'Sorted by modification date'
         \ |elseif &sort == '+name'
         \ |    set sort=-size
         \ |    echo 'Sorted by size'
         \ |else
         \ |    set sort=+name
         \ |    echo 'Sorted by name'
         \ |endif
nnoremap <silent> ,S :togglesort<cr>

" Note that due to the way terminals process their input, several keyboard keys might be mapped to single key code, for example: | https://vifm.info/manual.shtml
"   - <cr> and <c-m>;
"   - <tab> and <c-i>;
"   - <c-h> and <bs> and <del>;
"   - etc.
"
" use <space> as Leader key
" switches active pane (use <s-tab> to switch to view pane in double-pane mode) | :nmap
nnoremap <tab> <space>
" https://q2a.vifm.info/1699/how-to-unmap-space
" TODO this is weird
" nnoremap <space> <nop>
" TODO this is ugly
nnoremap <wait> <space><esc> <nop>
"
" After `nnoremap <tab> <space>`, <c-i> also mapped to <space> automatically.
" I don't know how to map <tab> and <c-i> separately, so I have to use use <right> instead of <c-i>.
"
" :histprev same as <c-o>
" nnoremap <left> :histprev<cr>
nnoremap <left> <c-o>
" :histnext same as <c-i>
" nnoremap <right> :histnext<cr>
nnoremap <right> <c-i>

" ==============================================================================
" various commands

" makes a backup copy
command! bak :clone %c.bak

" use Vim to diff files
" uses selection of current pane when it contains more than one file
" otherwise uses left pane file and right pane file keeping order inside Vim
command! diff : if expand('%%c') == expand('%%f')
            \ |     if paneisat('right') && paneisat('bottom')
            \ |         execute '!nvim -d %%C %%c'
            \ |     else
            \ |         execute '!nvim -d %%c %%C'
            \ |     endif
            \ | else
            \ |     execute '!nvim -d %%f'
            \ | endif

" https://wiki.vifm.info/index.php/Compare_directory_-_remaining_the_difference_only
" visually compared when checking differences in only two directories:
" enter each folder and use `:compare listall` (double-pane mode)
nnoremap ][ :compare listall<cr>
nnoremap ]] :diff<cr>

" ------------------------------------------------------------------------------
" Integration
" ------------------------------------------------------------------------------

" ==============================================================================
" zoxide

" https://q2a.vifm.info/949/how-can-i-integrate-zoxide-into-vifm
" jump to highest ranked directory when occurs "zoxide: no match found" like zoxide itself does, or don't jump?
" %a instead of '%a' to handle multiple arguments like `z foo bar`
command! z : if '%a' == ''
          \|     execute 'cd ~'
          \| else
          \|     let $Z_PICK = term("zoxide query --exclude '%d' %a 2>/dev/tty")
          \|     if $Z_PICK != ''
          \|         execute 'cd' fnameescape($Z_PICK)
          \|     endif
          \| endif
nnoremap z<space> :z<space>
nnoremap z<cr> :cd<cr>

" https://github.com/sxyazi/yazi/blob/main/yazi-plugin/preset/plugins/zoxide.lua
" '%d' instead of %d to handle spaces in directory names
" command! zi :set noquickview | :execute 'cd' fnameescape(system("zoxide query -i --exclude '%d' 2>/dev/tty")) '%IU' | redraw
command! zi : set noquickview
           \| let $ZI_PICK = system("zoxide query -i --exclude '%d' 2>/dev/tty")
           \| if $ZI_PICK != ''
           \|     execute 'cd' fnameescape($ZI_PICK) '%IU'
           \| endif
           \| redraw
nnoremap zi :zi<cr>
nnoremap ` :zi<cr>

" %d instead of '%d' to handle spaces in directory names
autocmd DirEnter * !zoxide add %d %i

" ==============================================================================
" fzf + fd/rg

" https://wiki.vifm.info/index.php/How_to_integrate_fzf_for_fuzzy_finding
" https://github.com/vifm/vifm/issues/279#issuecomment-1001788619
if $TMUX
    " Use popup window. Requires tmux 3.2 and up
    command! FZFfind : set noquickview
                    \| let $FZF_PICK = system('fd -H | fzf-tmux -p 60%% --reverse --header="Find in path: %d" 2>/dev/tty')
                    \| if $FZF_PICK != ''
                    \|     execute system('[ -f "$FZF_PICK" ] && echo goto || echo cd') fnameescape($FZF_PICK)
                    \| endif
                    \| redraw

    command! FZFgrep : set noquickview
                    \| let $RG_PREFIX = "rg --column --line-number --no-heading --color=always --smart-case "
                    \| let $FZF_PICK = system("FZF_DEFAULT_COMMAND=\"$RG_PREFIX ''\" fzf-tmux -p 60%% --bind \"change:reload:$RG_PREFIX {q} || true\" --ansi --disabled --layout=reverse --header 'Grep in path: %d' 2>/dev/tty | cut -d':' -f1")
                    \| if $FZF_PICK != ''
                    \|     execute system('[ -f "$FZF_PICK" ] && echo goto || echo cd') fnameescape($FZF_PICK)
                    \| endif
                    \| redraw

    " `-d 1` for fd to search only one level deep
    command! FZFcd : set noquickview
                  \| let $FZF_PICK = system('fd -H -t d | fzf-tmux -p 90,30 --reverse --header="%d ❯ cd" 2>/dev/tty')
                  \| if $FZF_PICK != ''
                  \|     execute 'cd' fnameescape($FZF_PICK)
                  \| endif
                  \| redraw

    command! FZFedit : set noquickview
                    \| let $FZF_PICK = system('fd -H -t f | fzf-tmux -p 90,30 --reverse --header="%d ❯ $EDITOR" 2>/dev/tty')
                    \| if $FZF_PICK != ''
                    \|     execute 'edit' fnameescape($FZF_PICK)
                    \| endif
                    \| redraw

    command! FZFczea : set noquickview
                    \| let $FZF_PICK = system('fd -H -t f | fzf-tmux -p 90,30 --reverse --header="%d ❯ chezmoi edit --apply --verbose" 2>/dev/tty')
                    \| if $FZF_PICK != ''
                    \|     execute ':!%nchezmoi edit --apply --verbose' fnameescape($FZF_PICK)
                    \| endif
                    \| redraw
else
    " Use full-screen. Works without tmux
    command! FZFfind : let $FZF_PICK = term('fd -H | fzf --reverse --header="Find in path: %d" 2>/dev/tty')
                    \| if $FZF_PICK != ''
                    \|     execute system('[ -f "$FZF_PICK" ] && echo goto || echo cd') fnameescape($FZF_PICK)
                    \| endif

    " https://q2a.vifm.info/1624/how-to-use-ripgrep-fzf-to-navigate-in-vifm
    " https://github.com/gokcehan/lf/wiki/Integrations#ripgrep
    " https://github.com/junegunn/fzf#3-interactive-ripgrep-integration
    command! FZFgrep : let $RG_PREFIX = "rg --column --line-number --no-heading --color=always --smart-case "
                    \| let $FZF_PICK = term("FZF_DEFAULT_COMMAND=\"$RG_PREFIX ''\" fzf --bind \"change:reload:$RG_PREFIX {q} || true\" --ansi --disabled --layout=reverse --header 'Grep in path: %d' 2>/dev/tty | cut -d':' -f1")
                    \| if $FZF_PICK != ''
                    \|     execute system('[ -f "$FZF_PICK" ] && echo goto || echo cd') fnameescape($FZF_PICK)
                    \| endif

    command! FZFcd : let $FZF_PICK = term('fd -H -t d | fzf --reverse --header="%d ❯ cd" 2>/dev/tty')
                  \| if $FZF_PICK != ''
                  \|     execute 'cd' fnameescape($FZF_PICK)
                  \| endif

    command! FZFedit : let $FZF_PICK = term('fd -H -t f | fzf --reverse --header="%d ❯ $EDITOR" 2>/dev/tty')
                    \| if $FZF_PICK != ''
                    \|     execute 'edit' fnameescape($FZF_PICK)
                    \| endif

    command! FZFczea : let $FZF_PICK = term('fd -H -t f | fzf --reverse --header="%d ❯ chezmoi edit --apply --verbose" 2>/dev/tty')
                    \| if $FZF_PICK != ''
                    \|     execute ':!%nchezmoi edit --apply --verbose' fnameescape($FZF_PICK)
                    \| endif
endif

" TODO more sensible mappings
" find
" nnoremap <c-p> :FZFfind<cr>
nnoremap <wait> <space>f :FZFfind<cr>

" grep
nnoremap <wait> <space>g :FZFgrep<cr>

" cd to child directory
nnoremap <wait> <space>j :FZFcd<cr>

" edit file from child directory in nvim
nnoremap <wait> <space>e :FZFedit<cr>

" edit file from child directory with chezmoi
nnoremap <wait> <space>c<esc> <nop>
nnoremap <wait> <space>cz<esc> <nop>
nnoremap <wait> <space>czf :FZFczea<cr>
nnoremap <wait> <space>cze :!chezmoi edit --apply --verbose %f<cr>
nnoremap <wait> <space>cza :!chezmoi add %f<cr>
nnoremap <wait> <space>czz :execute 'cd' fnameescape(system('chezmoi source-path'))<cr>

" TODO bookmarks (see https://github.com/vifm/vifm/issues/279)

" ==============================================================================
" git

" always show git log in preview of files inside some repository
" au DirEnter '~/.local/share/chezmoi/**/*' setl previewprg='git log --color -- %c 2>&1'

" ------------------------------------------------------------------------------
" TODO
" ------------------------------------------------------------------------------

" https://github.com/xaizek/dotvifm/blob/master/vifmrc
" https://github.com/ObserverOfTime/home.files/blob/master/.config/vifm/vifmrc
" https://github.com/rockyzhang24/dotfiles/tree/master/.config/vifm | https://github.com/vifm/vifm#other-resources
" https://github.com/gerardbm/dotfiles/blob/master/vifm/.config/vifm/vifmrc
" https://github.com/sdushantha/dotfiles/blob/master/vifm/.config/vifm/vifmrc

" Use ripgrep instead of grep
" set grepprg=rg\ --color=never\ -Hn\ %i\ %a\ %s
" Use fd instead of find
" set findprg=fd\ --color=never\ %p\ %s

" available key mappings
" nnoremap x
" nnoremap X
" nnoremap b
" nnoremap B
" nnoremap ,
" zoxide?
" nnoremap `
" Yazi: Create a symbolic link to the yanked files (absolute path)
" nnoremap -
" Yazi: Create a symbolic link to the yanked files (relative path)
" nnoremap _
" nnoremap V
" nnoremap :
" nnoremap a
" nnoremap r
" local filter like Yazi? (as ; maps to :)
" nnoremap f =
" nnoremap s
" nnoremap H
" nnoremap M
" nnoremap L
" nnoremap T
" nnoremap U
" nnoremap <up>
" nnoremap <down>
