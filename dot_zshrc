# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13
zstyle ':omz:update' frequency 2

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git tmux zsh-vi-mode)

# you have to add the `ZSH...=...` assignment before the line `source $ZSH/oh-my-zsh.sh`, from https://github.com/ohmyzsh/ohmyzsh/issues/3676#issuecomment-77806736
# https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/tmux
# https://github.com/ohmyzsh/ohmyzsh/issues/7420
# if [ "$TERMINAL_EMULATOR" != "JetBrains-JediTerm" ]; then
#     ZSH_TMUX_AUTOSTART=true
#     # ZSH_TMUX_AUTOCONNECT=false
# fi
# -z "$INTELLIJ_ENVIRONMENT_READER" | https://github.com/ohmyzsh/ohmyzsh/pull/11927
# 防止影响JetBrains, emacs, vscode内的终端
# if [[ "$TERM" == "xterm-kitty" ]]; then
#     ZSH_TMUX_AUTOSTART=true
# fi
# outside of tmux, `$TERM` must be set to `xterm-256color` | https://github.com/gpakosz/.tmux
export TERM='xterm-256color'
# run `env | less` on kitty and iterm2
if [[ "${__CFBundleIdentifier}" == "net.kovidgoyal.kitty" ]]; then
    ZSH_TMUX_AUTOSTART=true
fi

# https://docs.brew.sh/Shell-Completion
FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

# `vv` of zsh-vi-mode
export EDITOR='nvim'
export VISUAL='nvim'

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
source ~/powerlevel10k/powerlevel10k.zsh-theme

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# zsh-syntax-highlighting
source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# zsh-autosuggestions
source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh

# https://docs.brew.sh/Homebrew-and-Python
export PATH="$(brew --prefix python)/libexec/bin:$PATH"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

eval $(thefuck --alias)

# https://github.com/cheat/cheat
export CHEAT_USE_FZF=true

source $HOME/.config/broot/launcher/bash/br

# To initialize zoxide, add this to your configuration (usually ~/.zshrc):
eval "$(zoxide init zsh)"

# https://stackoverflow.com/questions/14189134/how-to-change-git-from-chinese-to-english-in-mac
export LC_ALL=en_US.UTF-8
# You may need to manually set your language environment
export LANG=en_US.UTF-8

# brew info lesspipe
export LESSOPEN="|/opt/homebrew/bin/lesspipe.sh %s"

# https://github.com/sharkdp/bat
# bat --list-themes | fzf --preview="bat --theme={} --color=always ~/.zshrc"
export BAT_THEME="TwoDark"
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
# plain: disables all available components. | bat --help
export BAT_STYLE="plain"
help() {
    "$@" --help 2>&1 | bat --plain --language=help
}
# use global aliases to override -h and --help entirely:
# Be aware that in some cases, -h may not be a shorthand of --help (for example with ls).
# alias -g -- -h='-h 2>&1 | bat --language=help --style=plain'
alias -g -- --help='--help 2>&1 | bat --language=help --style=plain'

# brew search vim
# Warning: Error searching on GitHub: GitHub API Error: Requires authentication
# Create a GitHub personal access token: https://github.com/settings/tokens/new?scopes=gist,repo,workflow&description=Homebrew
# export HOMEBREW_GITHUB_API_TOKEN=

# http://www.npmmirror.com/
# alias for cnpm
# alias cnpm="npm --registry=https://registry.npmmirror.com \
#   --cache=$HOME/.npm/.cache/cnpm \
#   --disturl=https://npmmirror.com/mirrors/node \
#   --userconfig=$HOME/.cnpmrc"

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# https://github.com/pyenv/pyenv#set-up-your-shell-environment-for-pyenv
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# https://github.com/chubin/cheat.sh
export PATH="$PATH:$HOME/.local/bin"
fpath=(~/.zsh.d/ $fpath)

# pyenv-virtualenv: prompt changing will be removed from future release. configure `export PYENV_VIRTUALENV_DISABLE_PROMPT=1' to simulate the behavior.
export PYENV_VIRTUALENV_DISABLE_PROMPT=1
# https://github.com/pyenv/pyenv-virtualenv
# eval "$(pyenv virtualenv-init -)"
# To enable auto-activation add to your profile: | brew info pyenv-virtualenv
if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi

alias v='nvim'
alias vi="vim"
# alias n="nvim"
alias lv='lvim'
alias rr="ranger"

# use my fork (system clipboard integration) instead: https://github.com/qw457812/zsh-vi-mode
# https://github.com/jeffreytse/zsh-vi-mode | brew info zsh-vi-mode
# source $(brew --prefix)/opt/zsh-vi-mode/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh
#
# Since the default [initialization mode](https://github.com/jeffreytse/zsh-vi-mode#initialization-mode), this plugin
# will overwrite the previous key bindings, this causes the key bindings of
# other plugins (i.e. `fzf`, `zsh-autocomplete`, etc.) to fail.
#
# You can solve the compatibility issue as below:
#
# The plugin will auto execute this zvm_after_init function
function zvm_after_init() {
  # https://github.com/junegunn/fzf#setting-up-shell-integration
  # Set up fzf key bindings and fuzzy completion
  eval "$(fzf --zsh)"

  # downside vs fzf: atuin do not highlight the matched text like fzf do: https://github.com/atuinsh/atuin/issues/503
  # https://docs.atuin.sh/configuration/key-binding/
  export ATUIN_NOBIND="true"
  # https://github.com/atuinsh/atuin#shell-plugin
  eval "$(atuin init zsh)"
  # bind ctrl-r to zsh-vi-mode's insert mode
  bindkey '^r' atuin-search
  # bindkey -M vicmd '^r' atuin-search # disable in zsh-vi-mode's normal mode
  # bind up arrow to zsh-vi-mode's insert mode
  # run `cat -v` to observe up arrow key codes | https://github.com/zsh-users/zsh-history-substring-search
  # bindkey '^[[A' atuin-up-search
  # bindkey -M vicmd 'k' atuin-up-search # disable in zsh-vi-mode's normal mode
}
# Always starting with insert mode for each command line
ZVM_LINE_INIT_MODE=$ZVM_MODE_INSERT
ZVM_VI_INSERT_ESCAPE_BINDKEY=jj
ZVM_KEYTIMEOUT=0.3

# https://github.com/starship/starship
# eval "$(starship init zsh)"

# https://github.com/asdf-vm/asdf
. $(brew --prefix asdf)/libexec/asdf.sh

# https://github.com/DarrinTisdale/zsh-aliases-exa
# l='ls -lah'
alias l='eza --all --color=always --color-scale all --long --group --time-style=iso --git'
# la='ls -lAh'
alias la='eza --all --color=always --color-scale all --long --binary --group --header --modified --accessed --created --time-style=iso --git'
# llm
alias lm='eza --all --sort=modified --color=always --color-scale all --long --binary --group --header --modified --accessed --created --changed --time-style=iso --git'
alias lS='eza -1' # one column, just names
alias lt='eza --tree --level=2'
# ll='ls -lh'
# ls='ls -G'
# lsa='ls -lah'

# https://github.com/jesseduffield/lazydocker
alias lzd='lazydocker'
alias lzg='lazygit'

# alias lg='leetgo'

# https://github.com/doomemacs/doomemacs#install
export PATH="$PATH:$HOME/.config/doomemacs/bin"

# https://github.com/archidote/best-bash-zsh-alias-for-linux-terminal/blob/master/install.sh
alias b="cd -"
alias q="exit"

# install lsp server jdtls for doomemacs (temporary)
# export JAVA_HOME=/opt/homebrew/opt/openjdk@17/libexec/openjdk.jdk/Contents/Home
# export JAVA_HOME=/opt/homebrew/opt/openjdk/libexec/openjdk.jdk/Contents/Home
# `sudo ln -sfn /opt/homebrew/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk` (brew info openjdk)
# `sudo unlink /Library/Java/JavaVirtualMachines/openjdk.jdk`
# export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"

# https://github.com/mathiasbynens/dotfiles/blob/main/.aliases
# Shortcuts
alias dl="cd ~/Downloads"
# Trim new lines and copy to clipboard
# alias c="tr -d '\n' | pbcopy"
# Reload the shell (i.e. invoke as a login shell)
alias reload="exec ${SHELL} -l"
# Print each PATH entry on a separate line
alias path='echo -e ${PATH//:/\\n}'

alias pwdc="pwd | tr -d '\n' | pbcopy"

# https://github.com/mathiasbynens/dotfiles/blob/main/.functions
# Create a new directory and enter it
function mkd() {
  mkdir -p "$@" && cd "$_";
}
# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}
# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}
# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# alias ll="less"
# unalias ll
# function ll() {
#   if [ $# -eq 0 ]; then
#     less .;
#   else
#     less "$@";
#   fi;
# }

# deal this warning from `doom doctor`: "! The installed grep binary was not built with support for PCRE lookaheads"
# brew info grep
# PATH="/opt/homebrew/opt/grep/libexec/gnubin:$PATH"

# open emacs in terminal
# https://github.com/yqrashawn/yqdotfiles/blob/master/modules/yqrashawn/home-manager/dotfiles/.zsh.d/.alias.zsh
alias e='emacsclient -t'

# doomemacs by chemacs2
function de() {
  echo 'default' > ~/.emacs-profile && e "$@"
}
# spacemacs by chemacs2
function se() {
  echo 'spacemacs' > ~/.emacs-profile && e "$@"
}

# brew install jenv
export PATH="$HOME/.jenv/bin:$PATH"
eval "$(jenv init -)"

# https://superuser.com/questions/786956/how-to-remove-zsh-alias
# unalias grep

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$($HOME'/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "$HOME/miniconda3/etc/profile.d/conda.sh" ]; then
        . "$HOME/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="$HOME/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

# brew install mysql@8.0
# export PATH="/opt/homebrew/opt/mysql@8.0/bin:$PATH"

# https://github.com/FelixKratz/dotfiles/blob/master/.zshrc
# Sketchybar interactivity overloads
function brew() {
  command brew "$@"

  if [[ $* =~ "upgrade" ]] || [[ $* =~ "update" ]] || [[ $* =~ "outdated" ]]; then
    sketchybar --trigger brew_update
  fi
}

alias bo='brew update && brew outdated'
alias bu='brew upgrade'
alias bi='brew info'
alias bI='brew install'
alias bl='brew list'
alias bs='brew services'
function bss() {
  # echo "$(brew services info $@ --json | jq '.[0] | .status')"
  # cheat jq
  if [ $# -eq 0 ]; then
    brew services
  else
    if [ -z "$(brew services info $@ --json | jq '.[] | select(.status == "started")')" ]; then
      brew services start "$@";
    else
      brew services stop "$@";
    fi;
  fi;
}
alias bsr='brew services restart'
alias bsk='brew services kill'
alias bS='brew search'
alias bd='brew doctor'

# fix "Too many open files" for goku: 256 -> 2048
# ulimit -S -n 2048

# $ZSH/plugins/common-aliases/common-aliases.plugin.zsh
# alias zshrc='${=EDITOR} ${ZDOTDIR:-$HOME}/.zshrc' # Quick access to the .zshrc file
# Command line head / tail shortcuts
alias -g H='| head'
alias -g T='| tail'
alias -g G='| grep'
alias -g L="| less"
alias -g LL="2>&1 | less"
alias -g C="| clipcopy"
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'

# https://github.com/posquit0/zshrc/blob/9a33d6e3194dd9f2667e407029ef537b8ce74b41/aliases.zshrc
alias cz=chezmoi
alias cze='chezmoi edit'
alias czd='chezmoi diff'
alias czs='chezmoi status'
alias cza='chezmoi -v apply'
alias czea='chezmoi edit --apply --verbose'
alias czz='chezmoi cd'
alias czgoku='chezmoi edit --apply --verbose $HOME/.config/karabiner.edn && goku'
alias czzshrc='chezmoi edit --apply --verbose ${ZDOTDIR:-$HOME}/.zshrc && exec ${SHELL} -l'
alias czcode='chezmoi edit --apply --verbose "$HOME/Library/Application Support/Code/User/settings.json"'
# https://www.reddit.com/r/KittyTerminal/comments/rzpjed/easier_ways_to_reload_kitty/
# You can reload the config file within kitty by sending kitty the SIGUSR1 signal with `kill -SIGUSR1 $KITTY_PID`. | https://sw.kovidgoyal.net/kitty/conf/
alias czkitty='chezmoi edit --apply --verbose $HOME/.config/kitty/kitty.conf && kill -SIGUSR1 $(pgrep -a kitty)'

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

# set python command if 'py' not installed | https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/python/python.plugin.zsh
builtin which py > /dev/null || alias py='python3'

# https://github.com/jarun/nnn/wiki/Basic-use-cases#configure-cd-on-quit
# https://github.com/jarun/nnn/blob/master/misc/quitcd/quitcd.bash_sh_zsh
nn ()
{
    # Block nesting of nnn in subshells
    [ "${NNNLVL:-0}" -eq 0 ] || {
        echo "nnn is already running"
        return
    }

    # The behaviour is set to cd on quit (nnn checks if NNN_TMPFILE is set)
    # If NNN_TMPFILE is set to a custom path, it must be exported for nnn to
    # see. To cd on quit only on ^G, remove the "export" and make sure not to
    # use a custom path, i.e. set NNN_TMPFILE *exactly* as follows:
    #      NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    # The command builtin allows one to alias nnn to n, if desired, without
    # making an infinitely recursive alias
    command nnn "$@"

    [ ! -f "$NNN_TMPFILE" ] || {
        . "$NNN_TMPFILE"
        rm -f -- "$NNN_TMPFILE" > /dev/null
    }
}

# https://github.com/gokcehan/lf/blob/master/etc/lfcd.sh
lf () {
    # `command` is needed in case `lfcd` is aliased to `lf`
    cd "$(command lf -print-last-dir "$@")"
}

# https://yazi-rs.github.io/docs/quick-start
function yy() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# Exit to last working directory (LWD) | https://github.com/kyoheiu/felix
# source <(command fx --init)
# https://github.com/kyoheiu/felix/issues/41
alias felix='~/.cargo/bin/fx'

# https://wiki.vifm.info/index.php/How_to_set_shell_working_directory_after_leaving_Vifm
f()
{
    local dst="$(command vifm --choose-dir - "$@")"
    if [ -z "$dst" ]; then
        echo 'Directory picking cancelled/failed'
        return 1
    fi
    cd "$dst"
}
