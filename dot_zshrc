# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  tmux
  zsh-vi-mode
  you-should-use
  zsh-autosuggestions
  zsh-syntax-highlighting # must be the last plugin sourced
)

# `vv` of zsh-vi-mode
export EDITOR='nvim'
export VISUAL='nvim'
# outside of tmux, `$TERM` must be set to `xterm-256color` | https://github.com/gpakosz/.tmux
export TERM='xterm-256color'

# see output of `zellij setup --generate-auto-start zsh`
function start_zellij() {
    if [[ -z "$ZELLIJ" ]]; then
        if [[ "$ZELLIJ_AUTO_ATTACH" == "true" ]]; then
            zellij attach -c main # add `main`
        else
            zellij
        fi

        if [[ "$ZELLIJ_AUTO_EXIT" == "true" ]]; then
            exit
        fi
    fi
}

# you have to add the `ZSH...=...` assignment before the line `source $ZSH/oh-my-zsh.sh`, see https://github.com/ohmyzsh/ohmyzsh/issues/3676#issuecomment-77806736
# prevent from affecting the terminal in JetBrains, emacs, vscode | https://github.com/ohmyzsh/ohmyzsh/issues/7420
case "${__CFBundleIdentifier}" in
    "org.alacritty")
        ZSH_TMUX_AUTOSTART=true
        # ZSH_TMUX_AUTOQUIT=false
        ;;
    # "net.kovidgoyal.kitty")
    #     ZELLIJ_AUTO_ATTACH=true
    #     ZELLIJ_AUTO_EXIT=true
    #     start_zellij # eval "$(zellij setup --generate-auto-start zsh)" # not work well
    #     ;;
esac

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

export PATH="$PATH:$HOME/.local/bin"
export PATH="$PATH:$HOME/.config/doomemacs/bin"

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# --status-column --status-col-width=1
# --underline-special
# --shift=10
# --color=d+b$ --color=s+y$ --color=u+g$ (--use-color not required in this case)
# https://explainshell.com/explain?cmd=less+-RiMSx4
export LESS='--RAW-CONTROL-CHARS --ignore-case --LONG-PROMPT --chop-long-lines --incsearch --use-color --tabs=4 --intr=c$ --save-marks --status-line'
export BAT_THEME="TwoDark"
export BAT_STYLE="plain"
# export MANPAGER="sh -c 'col -bx | bat -l man -p'"
export MANPAGER='nvim -c "nnoremap d <C-d>|lua vim.defer_fn(function() vim.api.nvim_command(\"silent! nunmap dd|nnoremap u <C-u>\") end, 500)" +Man!'
export EZA_CONFIG_DIR="$HOME/.config/eza"

# zsh-vi-mode
export ZVM_LINE_INIT_MODE=$ZVM_MODE_INSERT
export ZVM_VI_SURROUND_BINDKEY="helix"
# key bindings goes here, see https://github.com/jeffreytse/zsh-vi-mode#execute-extra-commands
function zvm_after_init() {
  export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS 
    --height=100%
    --layout=reverse
    --ansi
    --scrollbar="▐"
    --ellipsis="…"
    --preview-window=border-left
    --bind=ctrl-j:down,ctrl-k:up
    --bind=ctrl-u:half-page-up,ctrl-d:half-page-down
    --bind=ctrl-s:jump
    --bind=ctrl-f:preview-half-page-down,ctrl-b:preview-half-page-up
    --bind=ctrl-a:beginning-of-line,ctrl-e:end-of-line
  "
  source <(fzf --zsh)

  # downside vs fzf: atuin do not highlight the matched text like fzf do: https://github.com/atuinsh/atuin/issues/503
  export ATUIN_NOBIND="true"
  eval "$(atuin init zsh)"
  # bindkey '^r' atuin-search
  # bindkey -M vicmd '^r' atuin-search
  # bindkey '^[[A' atuin-up-search # up arrow, run `cat -v` to observe key codes
  # bindkey -M vicmd 'k' atuin-up-search
}

alias b="cd -"
alias q="exit"

alias v='nvim'
alias view="nvim -R"
alias vimpager='nvim - -c "lua U.terminal.colorize()"'
# https://github.com/wofr06/lesspipe#511-syntax-highlighting-choices
# https://stackoverflow.com/questions/43702876/creating-an-alias-in-bash-to-less-sh-less-vim
# alias vless="/usr/share/vim/vim91/macros/less.sh"
alias vless="nvim -u $(brew --prefix)/share/nvim/runtime/macros/less.vim"
alias cat='bat --paging=never'

alias l='eza --all --group-directories-first --color=always --color-scale all --icons=auto --long --group --time-style=iso --git'
alias la='eza --all --group-directories-first --color=always --color-scale all --icons=auto --long --binary --group --header --modified --accessed --created --time-style=iso --git'
alias lm='eza --all --sort=modified --color=always --color-scale all --icons=auto --long --binary --group --header --modified --accessed --created --changed --time-style=iso --git'
alias lt='eza --tree --level=2'
alias mv='mv -iv'
alias cp='cp -riv'
alias rm='rm -i'
alias mkdir="mkdir -vp"
alias ncdu="ncdu --color dark"
alias pwdc="pwd | tr -d '\n' | clipcopy"
alias path='echo -e ${PATH//:/\\n}'
alias dl="cd ~/Downloads"

alias gg='lazygit'
alias gcl1='git clone --depth 1'

alias -g -- -h='-h 2>&1 | bat --language=help --style=plain'
alias -g -- --help='--help 2>&1 | bat --language=help --style=plain'
# $ZSH/plugins/common-aliases/common-aliases.plugin.zsh
alias -g H='| head'
alias -g T='| tail'
alias -g G='| grep'
alias -g L="| bat --style=plain --paging=always"
alias -g LL="2>&1 | bat --style=plain --paging=always"
alias -g C="| clipcopy"
alias -g F='| fzf'
alias -g V='| nvim - -c "lua U.terminal.colorize()"'
alias -g NE="2> /dev/null"
alias -g NUL="> /dev/null 2>&1"

# https://github.com/posquit0/zshrc/blob/9a33d6e3194dd9f2667e407029ef537b8ce74b41/aliases.zshrc
alias cz=chezmoi
alias cze='chezmoi edit'
alias czd='chezmoi diff'
alias czs='chezmoi status'
alias cza='chezmoi -v apply'
alias czea='chezmoi edit --apply --verbose'
alias czz='chezmoi cd'
alias czm='cz managed .'
alias czum='cz unmanaged .'
# alias czgoku='chezmoi edit --apply --verbose $HOME/.config/karabiner.edn && goku'
# alias czzshrc='chezmoi edit --apply --verbose ${ZDOTDIR:-$HOME}/.zshrc && exec ${SHELL} -l'
# alias czkitty='chezmoi edit --apply --verbose $HOME/.config/kitty/kitty.conf && kill -SIGUSR1 $(pgrep -a kitty)'

alias reload="exec ${SHELL} -l"
alias fda="fd -IH"
alias rga="rg -uu"
alias zj="zellij"
alias lzd='lazydocker'
builtin which py > /dev/null || alias py='python3'
# alias myip="dig +short myip.opendns.com @resolver1.opendns.com"
# alias myip="curl http://icanhazip.com"
# alias myip="curl ipecho.net/plain; echo"
alias myip="curl https://ipinfo.io/json"

# https://github.com/gpakosz/.tmux/blob/9cf49731cd785b76cf792046feed0e8275457918/.tmux.conf#L53
function c() {
  clear
  if [[ -n "$TMUX" ]]; then
    command tmux clear-history
  fi
}
function o() {
  if [ $# -eq 0 ]; then
    open .;
  else
    open "$@";
  fi;
}
function h() {
    "$@" --help 2>&1 | bat --plain --language=help
}
function mkd() {
  mkdir -p "$@" && cd "$_";
}
function cdf() { # short for `cdfinder`
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}
function tre() {
  tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Sketchybar interactivity overloads
function brew() {
  command brew "$@"
  if [[ $* =~ "upgrade" ]] || [[ $* =~ "update" ]] || [[ $* =~ "outdated" ]]; then
    sketchybar --trigger brew_update
  fi
}
alias bo='brew update && brew outdated'
alias bu='brew upgrade'
alias bi='brew info'
alias bI='brew install'
alias bl='brew list'
alias bs='brew services'
alias bS='brew search'
alias bd='brew doctor'
function bss() {
  if [ $# -eq 0 ]; then
    brew services
  else
    if [ -z "$(brew services info $@ --json | jq '.[] | select(.status == "started")')" ]; then
      brew services start "$@";
    else
      brew services stop "$@";
    fi;
  fi;
}

alias sva='svn add'
alias svc='svn commit'
alias svs='svn status'
alias svu='svn update'
alias svl='svn log -v'
function svd() {
  # --file-style omit --hunk-header-style omit
  svn diff -x -p "$@" | svn_strip_diff_header | delta --line-numbers;
}
function svld() {
  if [[ -z $1 ]] || [[ ${1:0:1} == '-' ]]
  then
    svn log -v --diff "$@" | svn_strip_diff_header | delta --line-numbers;
  else
    svn log -v --diff -r "$@" | svn_strip_diff_header | delta --line-numbers;
  fi
}

function f() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    builtin cd -- "$cwd"
  fi
  rm -f -- "$tmp"
}

# https://wiki.vifm.info/index.php/How_to_set_shell_working_directory_after_leaving_Vifm
function ff() {
  local dst="$(command vifm --choose-dir - "$@")"
  if [ -z "$dst" ]; then
    echo 'Directory picking cancelled/failed'
    return 1
  fi
  cd "$dst"
}

# https://docs.gitignore.io/install/command-line
function gi() { curl -sLw "\n" https://www.toptal.com/developers/gitignore/api/$@ ;}
# https://docs.gitignore.io/use/advanced-command-line#oh-my-zsh
_gitignoreio_get_command_list() {
  curl -sL https://www.toptal.com/developers/gitignore/api/list | tr "," "\n"
}
_gitignoreio () {
  compset -P '*,'
  compadd -S '' `_gitignoreio_get_command_list`
}
compdef _gitignoreio gi

# reload network
function newloc() {
  local old="$(networksetup -getcurrentlocation)"
  local new="tmp_$(date '+%Y%m%d_%H%M%S')"
  if networksetup -createlocation "$new" populate >/dev/null && networksetup -switchtolocation "$new" >/dev/null && [[ "$old" == "tmp_"* ]]; then
    networksetup -deletelocation "$old" >/dev/null
  fi
}

alias term_proxy_on='export https_proxy=http://127.0.0.1:7897 http_proxy=http://127.0.0.1:7897 all_proxy=socks5://127.0.0.1:7897'
alias term_proxy_off='unset https_proxy http_proxy all_proxy'
function sys_proxy_on() {
  local proxy_ip="127.0.0.1"
  local http_proxy_port="7897"
  local socks_proxy_port="7897"
  networksetup -setwebproxy Wi-Fi "$proxy_ip" "$http_proxy_port"
  networksetup -setsecurewebproxy Wi-Fi "$proxy_ip" "$http_proxy_port"
  networksetup -setsocksfirewallproxy Wi-Fi "$proxy_ip" "$socks_proxy_port"
  networksetup -setwebproxystate Wi-Fi on
  networksetup -setsecurewebproxystate Wi-Fi on
  networksetup -setsocksfirewallproxystate Wi-Fi on
}
function sys_proxy_off() {
  networksetup -setwebproxystate Wi-Fi off
  networksetup -setsecurewebproxystate Wi-Fi off
  networksetup -setsocksfirewallproxystate Wi-Fi off
}

# alias e='emacsclient -t'
# # doomemacs by chemacs2
# function de() {
#   echo 'default' > ~/.emacs-profile && e "$@"
# }
# # spacemacs by chemacs2
# function se() {
#   echo 'spacemacs' > ~/.emacs-profile && e "$@"
# }

# # https://github.com/wlh320/rime-ls#macos
# export DYLD_LIBRARY_PATH=$HOME/rime-ls/librime/dist/lib

# https://wezfurlong.org/wezterm/shell-integration.html
# https://github.com/wez/wezterm/blob/main/assets/shell-integration/wezterm.sh
# https://github.com/VeeBop/dotfiles/blob/42d7e5205a8753f2593b51b3be11de47779c15ca/dot_zshrc.tmpl#L68
if [ -f /Applications/Wezterm.app/Contents/Resources/wezterm.sh ]; then
  source "/Applications/WezTerm.app/Contents/Resources/wezterm.sh"
fi

# export LESSOPEN="|/opt/homebrew/bin/lesspipe.sh %s"
if which batpipe > /dev/null; then eval "$(batpipe)"; fi
function m() {
  if [ $# -eq 0 ]; then
    less -F .;
  elif [ $# -eq 1 ]; then
    # sometimes lesspipe or batpipe not colorize the output
    bat "$@" || less -F "$@";
  else
    # bat combine multiple files into one, batpipe can not colorize the output when multiple files
    LESSOPEN="|/opt/homebrew/bin/lesspipe.sh %s" less -F "$@";
  fi;
}

eval "$(zoxide init zsh)"

export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi
export PYENV_VIRTUALENV_DISABLE_PROMPT=1
if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi

export PATH="$HOME/.jenv/bin:$PATH"
if which jenv > /dev/null; then eval "$(jenv init -)"; fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

if [[ -v TERMUX_VERSION ]]; then
  export PATH=$PATH:$HOME/go/bin

  # https://github.com/sharkdp/bat/issues/1517
  function man() {
    command man "$@" | eval ${MANPAGER}
  }

  alias pkgu='pkg update && pkg upgrade'
  alias pkgi='pkg install'
  alias pkgs='pkg search'
  alias pkgl='pkg list-installed'
  alias open="termux-open"
  alias l='eza --all --group-directories-first --color=always --color-scale all --icons=always --long --time-style=iso --no-user --git'
  alias ll='eza --all --group-directories-first --color=always --color-scale all --icons=always --long --group --time-style=iso --git'
  alias dl='cd ~/storage/downloads'
  alias rime='cd ~/storage/shared/Android/rime'
else
    term_proxy_on
fi
