"" Source your .vimrc
"source ~/.vimrc

"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
" set scrolloff=5
set scrolloff=4

" Do incremental searching.
set incsearch

" Don't use Ex mode, use Q for formatting.
" map Q gq


"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
"map \r <Action>(ReformatCode)

"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)


" Find more examples here: https://jb.gg/share-ideavimrc

" -----------------------------------------------------my configs--------------------------------------------------------
let mapleader=' '

""" Plugins  --------------------------------
" https://github.com/AlexPl292/IdeaVim-EasyMotion#supported-commands
" <ll>s, <ll>f/F, <ll>t/T, <ll>w/W, <ll>b/B, <ll>e/E, <ll>j, <ll>k, <ll>n/N
set easymotion
" https://github.com/Mishkun/ideavim-sneak#usage
" s{char}{char}    s/S    ;/,
" set sneak
" https://plugins.jetbrains.com/plugin/19417-ideavim-quickscope
" f/F/t/T
" set quickscope
" https://github.com/JetBrains/ideavim/wiki/NERDTree-support
" o/O/go, x/X, p/P, j, k, m, q
set NERDTree
" https://github.com/tpope/vim-surround/blob/master/doc/surround.txt
" ys("ys" is "you surround"), cs, ds, S
set surround
" https://github.com/terryma/vim-multiple-cursors/blob/master/doc/multiple_cursors.txt
" TODO how to use?
set multiple-cursors
" https://github.com/tpope/vim-commentary/blob/master/doc/commentary.txt
" [count]gc{motion}, o_gc, v_gc, gcc
set commentary
" https://github.com/vim-scripts/ReplaceWithRegister/blob/master/doc/ReplaceWithRegister.txt
" [count]["x]gr{motion}, [count]["x]grr, {Visual}["x]gr
set ReplaceWithRegister
" argument text objects: aa, ia
set argtextobj
" https://github.com/tommcdo/vim-exchange/blob/master/doc/exchange.txt
" cx{motion} to select, again to exchange
" cx, cxx, v_X, cxc (eg. exchanging two words using `cxiw` and `.`)
set exchange
" https://github.com/kana/vim-textobj-entire/blob/master/doc/textobj-entire.txt
" entire buffer text object: ae, ie(like `ae`, but leading and trailing empty lines are excluded)
set textobj-entire
" https://github.com/machakann/vim-highlightedyank/blob/master/doc/highlightedyank.txt
set highlightedyank
" https://github.com/dbakker/vim-paragraph-motion#vim-paragraph-motion
" { }
set vim-paragraph-motion
" https://github.com/michaeljsmith/vim-indent-object/blob/master/doc/indent-object.txt
" ai ii aI iI
set textobj-indent
" https://github.com/adelarsq/vim-matchit/blob/master/doc/matchit.txt
" % g%
set matchit
set which-key
set notimeout
" set timeoutlen=5000
" https://github.com/junegunn/vim-peekaboo
" peek registers: " <C-r>
set peekaboo
" af if
set functiontextobj
" aq iq ab ib
set mini-ai

""" Plugin settings -------------------------
let g:argtextobj_pairs="[:],(:),<:>"

let g:highlightedyank_highlight_duration = "150"
" let g:highlightedyank_highlight_color = "rgba(57, 197, 187, 155)"
let g:highlightedyank_highlight_color = "rgba(163, 190, 140, 155)"
" let g:highlightedyank_highlight_foreground_color = "rgba(0, 0, 0, 255)"

" <C-n> seems to me as a better solution than <M-n>,
" map <C-n> <Plug>NextWholeOccurrence
" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence

" https://github.com/MarcoIeni/intellimacs/blob/main/which-key.vim
" Show the menu also for default Vim actions like `gg` or `zz`.
let g:WhichKey_ShowVimActions = "true"
" https://github.com/JaimeArboleda/jet_brains_settings/blob/main/.ideavimrc
" let g:WhichKey_FontSize = 16
let g:WhichKey_CommandColor = "#f5bde6"
let g:WhichKey_PrefixColor = "#8aadf4"
let g:WhichKey_SortOrder = "by_key_prefix_first"
" let g:WhichKeyDesc_leader = "<leader> Leader key"
let g:WhichKey_DefaultDelay = 150

" https://github.com/justinmk/vim-sneak
" let g:sneak#label = 1
" map f <Plug>Sneak_f
" map F <Plug>Sneak_F
" map t <Plug>Sneak_t
" map T <Plug>Sneak_T

" https://plugins.jetbrains.com/plugin/10149-kjump
" nmap <leader><leader>s :action KJumpAction<cr>
" nmap <leader><leader>w :action KJumpAction.Word0<cr>
" nmap <leader>, :action KJumpAction.Word1<cr>
" nmap <leader>, :action KJumpAction.Word0<cr>
" nmap <leader><leader>l :action KJumpAction.Line<cr>

" Set this option to 0 if you want to disable the default mappings
let g:EasyMotion_do_mapping = 0

" Default Mapping |  <Plug> command       |
" -----------------------------------------------------------------
"  <ll>s          |  <Plug>(easymotion-s) |  mapped to sn
" map <leader>f <Plug>(easymotion-s)
"  <ll>f{char}    |  <Plug>(easymotion-f) |  mapped to fn
" map <leader>e <Plug>(easymotion-f)

" 不使用 sneak 的原因 ---> 想与 leap.nvim 体验一致
" map s <Plug>(easymotion-f)
" map S <Plug>(easymotion-F)
" nmap mm <Plug>(easymotion-s)
" nmap mm :action KJumpAction.Word0<cr>

" map s <Plug>(easymotion-s)
" map S :action KJumpAction.Word0<cr>

" https://github.com/yelog/vim-flash
" map s <Action>(flash.search)
" map S <Plug>(easymotion-bd-w)

" https://github.com/Mishkun/ideavim-sneak/issues/16
" Press `S` in normal mode to activate AceJump mode before the caret
" nmap S <Action>(AceBackwardAction)
" Press `s` in normal mode to activate AceJump mode after the caret
" nmap s <Action>(AceForwardAction)

let g:textobj_entire_no_default_key_mappings = 1
omap ag <Plug>textobj-entire-a
xmap ag <Plug>textobj-entire-a
omap ig <Plug>textobj-entire-i
xmap ig <Plug>textobj-entire-i

" https://github.com/JetBrains/ideavim/wiki/NERDTree-support#supported-commands
" https://youtrack.jetbrains.com/issue/VIM-3539/More-NERDTree-commands
" https://youtrack.jetbrains.com/issue/VIM-3488/New-commands-in-NERDTree
" https://github.com/JetBrains/ideavim/blob/34fe09c8f9bc5425280daa04211d3695fa99fd3a/src/main/java/com/maddyhome/idea/vim/extension/nerdtree/NerdTree.kt#L279
" let g:NERDTreeMapCloseDir = "h"
let g:NERDTreeMapJumpParent = "h"
let g:NERDTreeMapActivateNode = "l"
let g:NERDTreeMapQuit = "<BS>"
let g:NERDTreeMapPreview = "<TAB>"
let g:NERDTreeMapPaste = "p"
let g:NERDTreeMapNewFile = "a"
let g:NERDTreeMapNewDir = "A"
let g:NERDTreeMapRefresh = "<C-r>"
let g:NERDTreeMapRename = "r"
let g:NERDTreeMapToggleHidden = "g."
let g:NERDTreeMapOpenRecursively = "zO"
let g:NERDTreeMapCloseDir = "zc"
let g:NERDTreeMapCloseChildren = "zC"
let g:NERDTreeMapToggleZoom = "Z"
let g:NERDTreeMapMenu = ","

nmap s <Plug>ReplaceWithRegisterOperator
nmap ss <Plug>ReplaceWithRegisterLine
" xmap s <Plug>ReplaceWithRegisterVisual " `v_P`
nmap S s$
nmap sdd "zyy"zp

" helix-style mappings
map mm %
" surround
nmap ms <Plug>YSurround
vmap ms <Plug>VSurround
nmap mr <Plug>CSurround
nmap md <Plug>DSurround
" nunmap ys
" " vunmap S
" nunmap cs
" nunmap ds

""" Common settings -------------------------
" :h 'clipboard'
" On Mac OS X and Windows, the * and + registers both point to the system clipboard so unnamed and unnamedplus have the same effect: the unnamed register is synchronized with the system clipboard. | https://stackoverflow.com/questions/30691466/what-is-difference-between-vims-clipboard-unnamed-and-unnamedplus-settings
" 寄存器 ["*] 和寄存器 [""] 保持同步（即共享系统剪切板）
set clipboard=unnamed
" https://youtrack.jetbrains.com/issue/VIM-25/VIM-code-paste-should-be-smarter
set clipboard+=ideaput
set hlsearch
set ignorecase
set smartcase
set number
" set relativenumber
set showmode
set showcmd
set history=1000

" Clear highlights
nnoremap <esc> :noh<return><esc>
" https://stackoverflow.com/questions/60760660/how-to-ideavim-combine-two-action
" nnoremap <esc> :noh \| action HideAllWindows<CR><esc>

""" Idea specific settings ------------------
" https://github.com/JetBrains/ideavim/wiki/ideajoin-examples
set ideajoin
set idearefactormode=keep
set ideastatusicon=gray
" Map vim marks to IDEA global marks
set ideamarks

""" IdeaVim development stuff
" TODO what is this?
set ideastrictmode

""" My Mappings -----------------------------
nmap \e :e ~/.ideavimrc<CR>
nmap \r :source ~/.ideavimrc<CR>
" nmap \r <Action>(IdeaVim.ReloadVimRc.reload)
nmap \a <Action>(VimFindActionIdAction)
nmap \t <Action>(Terminal.OpenInTerminal)
nmap \g <Action>(Generate)
nmap \f <Action>(FindInPath)
nmap \o <Action>(SelectAllOccurrences)
nmap \hc <Action>(CallHierarchy)
nmap \hm <Action>(MethodHierarchy)
nmap \ht <Action>(TypeHierarchy)
" nmap \tt <Action>($ShowTranslationDialogAction)
" nmap \ts <Action>($TranslateTextComponent)
" nmap \ti <Action>($InclusiveTranslateAction)
" nmap \te <Action>($ExclusiveTranslateAction)

imap jj <esc>
" use `kk` after `<Action>(ActivateRunToolWindow)` manually (use CMD+A in RunToolWindow) to fix ideavim keybinding
imap kk <Action>($SelectAll)<esc>
imap jk <esc>
imap kj <esc>
nmap Y y$
nmap U <C-r>
nmap H 0^
xmap H 0^
omap H ^
nmap L $
xmap L g_
omap L $

vnoremap < <gv
vnoremap > >gv

nnoremap Q @q

nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" nmap <C-Up> <Action>(IncrementWindowHeight)
" nmap <C-Down> <Action>(DecrementWindowHeight)
" nmap <C-Left> <Action>(DecrementWindowWidth)
" nmap <C-Right> <Action>(IncrementWindowWidth)

map <C-/> <Action>(ActivateTerminalToolWindow)
map <C-space> <Action>(ActivateTerminalToolWindow)

" Have j and k navigate visual lines rather than logical ones
" Notice: just for fix ideavim bug ---> when meet folded @SuppressWarnings("unchecked") like /unchecked/, jjj... will not walk through (but gj not work well when soft-wrap is on)
nnoremap j gj
nnoremap k gk

" nmap * *zz
" nmap # #zz
" nmap n nzz
" nmap N Nzz

" nmap - <action>(ActivateProjectToolWindow)
nnoremap - :NERDTree<CR>

" https://github.com/JetBrains/ideavim/discussions/357#discussioncomment-1189455
nnoremap cn *Ncgn
nnoremap gw *N

" TODO is this better or not?
" nmap <C-o> <Action>(Back)
" nmap <C-i> <Action>(Forward)

" Do not overwrite unnamed register with x and s
" nnoremap x "_x
" sneak Plugin use `s`
" nnoremap s "_s

nmap [b <Action>(PreviousTab)
nmap ]b <Action>(NextTab)
nnoremap [B :tabm -1<cr>
nnoremap ]B :tabm +1<cr>
nmap [f <Action>(MethodUp)
nmap ]f <Action>(MethodDown)
nmap [m <Action>(MethodUp)
nmap ]m <Action>(MethodDown)
" `h` for hunk
nmap ]h <Action>(VcsShowNextChangeMarker)
nmap [h <Action>(VcsShowPrevChangeMarker)
" nmap [c <Action>(JumpToLastChange)
" nmap ]c <Action>(JumpToNextChange)
map ]d <Action>(GotoNextError)
map [d <Action>(GotoPreviousError)
nmap [t ?TODO<cr>
nmap ]t /TODO<cr>

map <M-j> <Action>(MoveStatementDown)
map <M-k> <Action>(MoveStatementUp)

" behaves like Vimium (with goku vim-s-mode rules)
" map <up> <Action>(MethodUp)
" map <down> <Action>(MethodDown)
map <down> :tabnext<cr>
map <up> :tabprevious<cr>
nnoremap J gt
nnoremap K gT
nnoremap gj J
xnoremap gj J
" `<Action>(ShowHoverInfo)` can be closed by `hjkl` but `K` can't
" nnoremap gk K
nmap gk <Action>(ShowHoverInfo)
" nmap <leader>K :help<space><C-r><C-w><CR>
nnoremap <leader>K K

nnoremap gO m`O<esc>``
nnoremap go m`o<esc>``

nmap gco o<c-o>gcc<c-o>A<Space>
nmap gcO O<c-o>gcc<c-o>A<Space>

" nnoremap <expr> gp '`[' . strpart(getregtype(), 0, 1) . '`]'
nnoremap gp `[v`]

" map <left> <Action>(JumpToLastChange)
" map <left> <C-o>
map <left> <Action>(Back)
" map <right> <Action>(JumpToNextChange)
" map <right> <C-i>
map <right> <Action>(Forward)

nmap <BS> <Action>(CloseContent)
nmap <leader><BS> <Action>(CloseProject)
" nmap <CR> <Action>(GotoDeclaration)
nmap <CR> gd

" github copilot <TAB> (behaves like zsh-autosuggestions)
imap <C-l> <Action>(copilot.applyInlays)
" nmap <C-l> <Action>(copilot.applyInlays)
imap <C-j> <Action>(copilot.cycleNextInlays)
" nmap <C-j> <Action>(copilot.cycleNextInlays)
imap <C-k> <Action>(copilot.cyclePrevInlays)
" nmap <C-k> <Action>(copilot.cyclePrevInlays)
" imap <C-space> <Action>(copilot.applyInlays)
" nmap <C-space> <Action>(copilot.applyInlays)

" 断行
" nnoremap <CR> a<CR><Esc>k$
" nnoremap <CR> o<Esc>

" https://github.com/ruohola/dotfiles/blob/master/vim/.ideavimrc
" Makes using marks a lot better, ` mapping clashes with surround.
" nmap ' <Action>(ShowBookmarks)
" nmap m <Action>(ToggleBookmarkWithMnemonic)

" map gd <Action>(GotoDeclarationOnly)
" map gr <Action>(FindUsages)
map gr gd
map gI <Action>(GotoImplementation)
" map gI <Action>(QuickImplementations)
" execute hover on gh
" map gh <Action>(ShowErrorDescription)
" map K <Action>(ShowHoverInfo)
map gK <Action>(ShowErrorDescription)
map gy <Action>(GotoTypeDeclaration)
" map gb <Action>(Back)
" map gf <Action>(Forward)
map gs <Action>(GotoSuperMethod)
nmap gD <Action>(GotoDeclaration)
nmap gK <Action>(ParameterInfo)
imap <C-k> <C-o><Action>(ParameterInfo)

" TODO:
" https://github.com/sei40kr/idea-LazyVim
" https://github.com/deifyed/dotfiles/blob/f5e86c22a6fdb688ea00f7a6fd5e8330f505b53b/dot_ideavimrc
" https://github.com/q843705423/ideavimrc/blob/master/.ideavimrc
" https://gist.github.com/SakuraWald/fa80eb949412e1a8c806512ad5f8a847
" https://github.com/ruohola/dotfiles/blob/master/vim/.ideavimrc
" https://github.com/JaimeArboleda/jet_brains_settings/blob/main/.ideavimrc
" https://github.com/magidc/dotfiles/blob/master/jetbrains/ideavimrc | https://github.com/magidc/nvim-config
" https://github.com/axieax/dotconfig/blob/main/intellij/.ideavimrc
" https://github.com/yunxiaoxiao11/nvimlazy/blob/3adac839389dc83bfe6bba6b60a3ae5bae9e09f6/jetbrains/.ideavimrc
" https://github.com/orhnk/dotideavimrc/blob/master/.ideavimrc
" https://github.com/kevinhwang91/dotfiles/blob/main/ideavim/ideavimrc
" https://github.com/triyangle/dotfiles/blob/master/config/home/.ideavimrc
" https://github.com/mmrzax/dots/blob/bbec0d1a0549cb1c7b74438bf99e1a4169251377/.ideavimrc
" https://github.com/phisco/configs/blob/ceab3ac5a0761b91b631d85f96de085b232c2faf/.ideavimrc
" https://github.com/helmerdavila/dotfiles/blob/main/dot_ideavimrc
" https://github.com/dengzhizhi/dotfiles/blob/fbb6e4179abe82b1307b74a723cb77f3e66afa19/.ideavimrc

" -----------------------------------------------------常用--------------------------------------------------------
" keys: https://ideavim.sourceforge.net/vim/intro.html
map <Leader><Space> <Action>(GotoFile)
map <leader>, <Action>(Switcher)
map <leader>/ <Action>(FindInPath)
map <leader>` :e #<CR>
map <leader>- <C-W>s
map <leader>_ <C-W>v
" nmap <leader>: :history<cr>
map <leader>: <Action>(GotoAction)
nmap <leader>. <Action>(NewScratchBuffer)
nmap <leader>S <Action>(Scratch.ShowFilesPopup)
nmap <leader>n <Action>(ActivateNotificationsToolWindow)
" map <leader>\| <C-W>v
map <leader>e :NERDTree<CR>
nmap <leader>E <Action>(SelectInProjectView)
nmap <leader>fe <Action>(ActivateProjectToolWindow)
" map <leader>z <Action>(ToggleZenMode)
map <leader>z <Action>(ToggleDistractionFreeMode)

" buffer
map <leader>bb :e #<CR>
" CloseEditor 关不掉 Compare.LastVersion
" map <leader>bd <Action>(CloseEditor)
map <leader>bd <Action>(CloseContent)
map <leader>bo <Action>(CloseAllEditorsButActive)
map <leader>bh <Action>(CloseAllToTheLeft)
map <leader>bl <Action>(CloseAllToTheRight)
map <leader>bA <Action>(CloseAllEditors)
map <leader>bp <Action>(PinActiveTabToggle)
map <leader>bP <Action>(CloseAllUnpinnedEditors)
map <leader>ba <Action>(CloseAllUnpinnedEditors)
map <leader>1 <Action>(GoToTab1)
map <leader>2 <Action>(GoToTab2)
map <leader>3 <Action>(GoToTab3)
map <leader>4 <Action>(GoToTab4)
map <leader>5 <Action>(GoToTab5)
map <leader>6 <Action>(GoToTab6)
map <leader>7 <Action>(GoToTab7)
map <leader>8 <Action>(GoToTab8)
map <leader>9 <Action>(GoToTab9)
nmap <leader>bH <Action>(GoToTab1)
nmap <leader>bL <Action>(GoToLastTab)

" code
" map <leader>ca <Action>(QuickActions)
map <leader>ca <Action>(RefactoringMenu)
nmap <leader>cA <Action>(ShowIntentionActions)
map <leader>cf <Action>(ReformatCode)
" map <leader>cf <Action>(ReformatCode) \| <Action>(OptimizeImports)
map <leader>co <Action>(OptimizeImports)
map <leader>cr <Action>(RenameElement)
map <leader>cR <Action>(RenameFile)
map <leader>cn <Action>(FixDocComment)
nmap <leader>cs <Action>(ActivateStructureToolWindow)
map <leader>cY <Action>(CopyReference)

" debug
map <leader>db <Action>(ToggleLineBreakpoint)

" file/find
map <Leader>ff <Action>(SearchEverywhere)
map <Leader>fn <Action>(NewFile)
" map <Leader>fn <Action>(NewScratchFile)
map <Leader>fN <Action>(NewClass)
map <leader>fr <Action>(RecentFiles)
map <leader>fb <Action>(Switcher)
" map <Leader>fc :e ~/.local/share/chezmoi/dot_ideavimrc<CR>
map <Leader>fc :e ~/.ideavimrc<CR>
map <Leader>fC :source ~/.ideavimrc<CR>
" map <leader>fp <Action>(RecentProjectListGroup)
map <leader>fp <Action>(ManageRecentProjects)
" yank file path (doomemacs keybinding)
map <leader>fy <Action>(CopyAbsolutePath)
map <leader>ft <Action>(ActivateTerminalToolWindow)

" git
map <leader>gg <Action>(ActivateVersionControlToolWindow)
map <leader>gG <Action>(Vcs.QuickListPopupAction)
map <leader>gb <Action>(Annotate)
nmap <leader>gl <Action>(Vcs.Show.Log)

" refactor
map <leader>rx <Action>(IntroduceVariable)
map <Leader>rf <Action>(ExtractMethod)
map <Leader>rI <Action>(ExtractInterface)
nmap <leader>ri <Action>(Inline)
vmap <leader>ri :action Inline<cr>

" search
nmap <leader>sg <Action>(FindInPath)
map <leader>sb <Action>(Find)
map <leader>ss <Action>(FileStructurePopup)
map <Leader>sS <Action>(GotoSymbol)
" nmap <leader>sm :marks<cr>
" nmap <leader>sm <Action>(Bookmarks.Goto)
map <Leader>sm <Action>(ShowBookmarks)
nmap <leader>sd <Action>(ActivateProblemsViewToolWindow)
nmap <leader>sh <Action>(HelpTopics)
nmap <leader>sj <Action>(RecentLocations)
nmap <leader>st <Action>(ActivateTODOToolWindow)
nmap <leader>sk :map<cr>
nmap <leader>s" :registers<cr>
nmap <leader>sc :history<cr>
" nmap <leader>sC :commands<cr>
" nmap <leader>sw <Action>(FindWordAtCaret)
" nmap <leader>sM <Action>(ShowDocumentation)
" nmap <leader>so <Action>(ShowSettings)

" test
map <leader>tl <Action>(Run)
map <leader>tc <Action>(Coverage)

" windows
nmap vv <c-w>v
map <leader>ww <c-w>w
map <leader>wh <c-w>h
map <leader>wj <c-w>j
map <leader>wk <c-w>k
map <leader>wl <c-w>l
" map <leader>wo <c-w>o
" nmap <leader>wo <action>(UnsplitAll) \| <action>(HideAllWindows)
nmap <leader>wo <action>(UnsplitAll)
" map <leader>ws <c-w>s
nmap <leader>ws <action>(SplitHorizontally)
" map <leader>wv <c-w>v
nmap <leader>wv <action>(SplitVertically)
" map <leader>wd <C-W>c
nmap <leader>wd <action>(Unsplit)
nmap <leader>wm <Action>(ToggleZenMode)

" ui
map <leader>uw <Action>(EditorToggleUseSoftWraps)
map <leader>ug <Action>(EditorToggleShowIndentLines)
map <leader>ul :set number!<cr>
map <leader>uL :set relativenumber!<cr>
" nmap <leader>uC <Action>(QuickChangeScheme)
nmap <leader>uC <Action>(ChangeLaf)

" notif
nmap <leader>un <Action>(ClearAllNotifications)
nmap <leader>snd <Action>(ClearAllNotifications)

" ai
map <leader>aa <Action>(copilot.chat.show)

" quit
" nmap <leader>qq <Action>(Exit)
map <leader>qq <Action>(CloseProject)

nmap <leader>ll <Action>(WelcomeScreen.Plugins)
nmap <leader>lc <Action>(CheckForUpdate)

" ----------------------------------------------------- TODO: nvim key-mappings --------------------------------------------------------

map ga <Action>(de.netnexus.CamelCasePlugin.ToggleCamelCase)
map <leader>uA <Action>(copilot.disableCopilot)
map <leader>ua <Action>(copilot.enableCopilot)
map <leader>ch :action CallHierarchy<CR>
" map <leader>cL <Action>(copilot.loginGitHub)
" map <leader>cs <Action>(EditorCompleteStatement)
map <leader>dd <Action>(Debug)
map <Leader>dv :action ViewBreakpoints<CR>
map <Leader>dc :action ChooseDebugConfiguration<CR>
map <leader>ds <Action>(Stop)
map <leader>fu <Action>(FindUsages)
" map <Leader>fp :action ShowFilePath<CR>
" map <leader>fs <Action>(FileStructurePopup)
" map <leader>gg :action Generate<CR>
" 打开 IdeaVim: Track Action Ids
map <Leader>gc :action GotoClass<CR>
" Highlight usages, use CMD+G/Shift+CMD+G to iterate
map <leader>hu <Action>(HighlightUsagesInFile)
map <leader>hl <Action>(HighlightUsagesInFile)
map <leader>ic <Action>(IntroduceConstant)
map <leader>im <Action>(ImplementMethods)
map <leader>lh <Action>(LocalHistory.ShowHistory)
map <leader>lw <Action>(JumpToLastWindow)
map <leader>mh <Action>(MethodHierarchy)
" map <Leader>nb :action ShowNavBar<CR>
map <leader>of <Action>(OpenFile)
map <Leader>om :action OverrideMethods<CR>
map <Leader>pm :action ShowPopupMenu<CR>
map <Leader>pr <Action>(ExternalSystem.ProjectRefreshAction)
" markdown preview
map <Leader>pc <Action>(TextEditorWithPreview.Layout.EditorOnly)
map <Leader>po <Action>(TextEditorWithPreview.Layout.EditorAndPreview)
map <Leader>pO <Action>(TextEditorWithPreview.Layout.PreviewOnly)
" map <leader>qd <Action>(QuickJavaDoc) " `K`
" quick fix
map <leader>qf <Action>(ShowIntentionActions)
map <leader>qi <Action>(QuickImplementations)
" quickscope 插件开关
map <leader>qs :set quickscope<CR>
map <leader>qS :set noquickscope<CR>
map <Leader>rc :action ChooseRunConfiguration<CR>
map <leader>rq :action Refactorings.QuickListPopupAction<CR>
map <leader>rr <Action>(Run)
map <leader>rs <Action>(Stop)
" map <leader>sd <Action>(SafeDelete)
map <leader>si <Action>(SelectIn)
map <leader>su <Action>(ShowUsages)
" map <Leader>sw :action SurroundWith<CR>
map <leader>th <Action>(TypeHierarchy)
" add
map <leader>va <Action>(ChangesView.AddUnversioned)
" commit
map <leader>vc <Action>(CheckinProject)
map <leader>vC <Action>(CheckinFiles)
" diff
map <leader>vd <Action>(Compare.LastVersion)
map <leader>vh <Action>(Vcs.ShowTabbedFileHistory)
map <leader>vq <Action>(Vcs.QuickListPopupAction)
map <leader>vR <Action>(ChangesView.Revert)
map <leader>vr <Action>(Vcs.RollbackChangedLines)
map <leader>vu <Action>(UpdateFiles)
" map <leader>wd <Action>(ActivateDebugToolWindow)
" map <leader>ww <Action>(JumpToLastWindow)
" https://youtrack.jetbrains.com/issue/VIM-2666/How-to-use-vim-bindings-in-Tool-Windows-like-Run-Structure-etc..
" https://youtrack.jetbrains.com/issue/VIM-2313/Normal-mode-doesnt-get-activated-in-the-log-panel
" map <leader>wr <Action>(ActivateRunToolWindow)
" use CMD+A to active ideavim in RunToolWindow
" https://stackoverflow.com/questions/60760660/how-to-ideavim-combine-two-action
" map <leader>wr :action ActivateRunToolWindow \| action $SelectAll<CR>
" https://youtrack.jetbrains.com/issue/VIM-2134/feature-request-Add-multiple-actions-to-a-single-key-binding
" map <leader>wr <Action>(ActivateRunToolWindow)<Action>($SelectAll)
" map <leader>wm <Action>(MaximizeToolWindow)
map <leader>x <Action>(HideAllWindows)

" quick fix
" 仅map <CR>影响重命名时的回车确认
map <leader><CR> <Action>(ShowIntentionActions)
map <leader><TAB> <Action>(EditorCompleteStatement)

" insert模式无效，已设置为IDEA快捷键，Code Completion - Basic
" map <TAB> <Action>(CodeCompletion)
nmap <TAB> <c-w>w

" TODO more Leader key like `,` | https://github.com/rockyzhang24/dotfiles/tree/master/.config/nvim#-key-mappings

" https://gist.github.com/PisecesPeng/9fabf2a1c1834bd35bf02c2bcb904708
" https://github.com/terryma/vim-expand-region#mapping
vmap K <Action>(EditorSelectWord)
vmap J <Action>(EditorUnSelectWord)

" TODO SelectNextOccurrence 多选-光标处的符号/选择此符号的下一个匹配项
" TODO UnselectPreviousOccurrence 多选-取消选择上一个匹配项
" TODO SelectAllOccurrences 多选-选择文件中的所有匹配项
" TODO NextDiff f7
" TODO PreviousDiff shift+f7

" TODO https://github.com/MarcoIeni/intellimacs | https://github.com/syl20bnr/spacemacs#spacemacs-everywhere

" Finding action ids
" `:actionlist [pattern]` | https://github.com/JetBrains/ideavim#finding-action-ids
" https://gist.github.com/ferhaterata/29fe8977145c7d7aadc8cb49eb0302a5
" https://github.com/lisiur/idea-actions

" Finding keymaps
" https://github.com/JetBrains/ideavim/blob/master/vim-engine/src/main/resources/ksp-generated/engine_commands.json
" Finding commands
" https://github.com/JetBrains/ideavim/blob/master/vim-engine/src/main/resources/ksp-generated/engine_ex_commands.json
